[{"/home/adgk/projects/colourbrain/src/index.js":"1","/home/adgk/projects/colourbrain/src/reportWebVitals.js":"2","/home/adgk/projects/colourbrain/src/App.js":"3","/home/adgk/projects/colourbrain/src/components/Main/Main.jsx":"4","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx":"5","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx":"6","/home/adgk/projects/colourbrain/src/components/About/About.jsx":"7","/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx":"8","/home/adgk/projects/colourbrain/src/tools/colorTools.js":"9","/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx":"10","/home/adgk/projects/colourbrain/src/components/Button/Button.jsx":"11","/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx":"12","/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx":"13","/home/adgk/projects/colourbrain/src/components/Results/Results.jsx":"14","/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx":"15","/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx":"16","/home/adgk/projects/colourbrain/src/tools/deltaE.js":"17","/home/adgk/projects/colourbrain/src/tools/scoring.js":"18","/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js":"19","/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js":"20","/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx":"21","/home/adgk/projects/colourbrain/src/components/Home/Home.jsx":"22"},{"size":500,"mtime":1610900279476,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1610900279497,"results":"25","hashOfConfig":"24"},{"size":1092,"mtime":1611152742650,"results":"26","hashOfConfig":"24"},{"size":268,"mtime":1611145657766,"results":"27","hashOfConfig":"24"},{"size":7969,"mtime":1611141387369,"results":"28","hashOfConfig":"24"},{"size":135,"mtime":1611146502847,"results":"29","hashOfConfig":"24"},{"size":140,"mtime":1611145942806,"results":"30","hashOfConfig":"24"},{"size":801,"mtime":1611150787055,"results":"31","hashOfConfig":"24"},{"size":2560,"mtime":1611096836344,"results":"32","hashOfConfig":"24"},{"size":258,"mtime":1610993652521,"results":"33","hashOfConfig":"24"},{"size":302,"mtime":1611054860104,"results":"34","hashOfConfig":"24"},{"size":2463,"mtime":1611141551923,"results":"35","hashOfConfig":"24"},{"size":1468,"mtime":1611095981296,"results":"36","hashOfConfig":"24"},{"size":4781,"mtime":1611096021732,"results":"37","hashOfConfig":"24"},{"size":712,"mtime":1611097034506,"results":"38","hashOfConfig":"24"},{"size":2649,"mtime":1611095190371,"results":"39","hashOfConfig":"24"},{"size":1531,"mtime":1610913524693,"results":"40","hashOfConfig":"24"},{"size":543,"mtime":1611062351266,"results":"41","hashOfConfig":"24"},{"size":762,"mtime":1611095190217,"results":"42","hashOfConfig":"24"},{"size":285,"mtime":1611011721284,"results":"43","hashOfConfig":"24"},{"size":655,"mtime":1611096594953,"results":"44","hashOfConfig":"24"},{"size":177,"mtime":1611151125131,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1kjysou",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/adgk/projects/colourbrain/src/index.js",[],["93","94"],"/home/adgk/projects/colourbrain/src/reportWebVitals.js",[],"/home/adgk/projects/colourbrain/src/App.js",[],"/home/adgk/projects/colourbrain/src/components/Main/Main.jsx",["95","96","97","98"],"/home/adgk/projects/colourbrain/src/components/Game/Game.jsx",["99"],"import React, { useEffect, useState, useRef } from 'react';\nimport tinycolor from 'tinycolor2';\nimport {\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchSL,\n  generateRounds,\n} from './../../tools/colorTools';\nimport './Game.scss';\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport RoundColor from '../RoundColor/RoundColor';\nimport Button from '../Button/Button';\n// import Checkbox from './../Checkbox/Checkbox';\nimport Results from '../Results/Results';\nimport CompareColors from '../CompareColors/CompareColors';\nimport NewGameButtons from '../NewGameButtons/NewGameButtons';\nimport Highscores from '../Highscores/Highscores';\n\n//must have minimum 2 rounds\n// make these a user adjustable settings option on homepage\nconst totalRounds = 2;\nconst flashTime = 1200;\n\nexport default function Game() {\n  const [roundColors, setRoundColors] = useState(generateRounds(totalRounds));\n  const [roundColorNames, setRoundColorNames] = useState([]);\n  const [results, setResults] = useState([]);\n  const [pickedColor, setPickedColor] = useState(randomRGBA([20, 235]));\n  const [round, setRound] = useState(totalRounds); // round number reset at start game (this is not set to 1 to ensure useeffect is triggered)\n  // stages: new, preview, pick, compare, results\n  const [roundStage, setRoundStage] = useState('new');\n  // game modes: Hue, SatLum, HSL\n  const [gamemode, setgamemode] = useState('Hue');\n  const [preview, setPreview] = useState(true);\n  const [userPreferencePreview, setuserPreferencePreview] = useState(false);\n  const [gameActive, setGameActive] = useState(false);\n  const [highscores, setHighscores] = useState({\n    Hue: 0,\n    SatLum: 0,\n    HSL: 0,\n    CompHue: 0,\n    CompSL: 0,\n    CompHSL: 0,\n    SCompHue: 0,\n    SCompSL: 0,\n    SCompHSL: 0,\n    TriadHue: 0,\n    TriadSL: 0,\n    TriadHSL: 0,\n    TetradHue: 0,\n    TetradSL: 0,\n    TetradHSL: 0,\n  });\n  const timer = useRef();\n  const isLoaded = useRef(false);\n\n  // Update player colour options when moving to next round (i.e. lock in Hue or Sat/Lum dpending on game mode)\n  useEffect(() => {\n    if (gameActive) {\n      const targetColor = roundColors[round - 1].targetColor;\n      switch (gamemode) {\n        case 'Hue':\n        case 'CompHue':\n        case 'SCompHue':\n        case 'TriadHue':\n        case 'TetradHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n\n          break;\n        case 'SatLum':\n        case 'SCompSL':\n        case 'CompSL':\n        case 'TriadSL':\n        case 'TetradSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        // All HSL options get a random colour\n        default:\n          setPickedColor(randomRGBA([20, 235]));\n      }\n      if (preview) {\n        setRoundStage('preview');\n        timer.current = setTimeout(() => {\n          setRoundStage('pick');\n        }, flashTime);\n        return () => clearTimeout(timer.current);\n      } else {\n        setRoundStage('pick');\n      }\n    }\n  }, [round]);\n\n  // Get highscores from local storage\n  useEffect(() => {\n    const data = localStorage.getItem('highscores');\n    if (data) {\n      setHighscores(JSON.parse(data));\n    }\n    return () => {};\n  }, []);\n\n  // Set highscores to local storage\n  useEffect(() => {\n    localStorage.setItem('highscores', JSON.stringify(highscores));\n    return () => {};\n  }, [highscores]);\n\n  // Fetch colour names from API\n  useEffect(() => {\n    if (!isLoaded.current) {\n      isLoaded.current = true;\n      return;\n    }\n    let hexTargets = roundColors.map((round) =>\n      tinycolor.fromRatio(round.targetColor).toHexString()\n    );\n    let requestString = hexTargets.map((t) => t.slice(1)).join(',');\n    // https://github.com/meodai/color-names\n    fetch(`https://api.color.pizza/v1/${requestString}`, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        // console.log('colors', response.colors);\n        let names = response.colors.map((n) => n.name);\n        setRoundColorNames(names);\n      })\n      .catch((error) => console.log(error));\n  }, [roundColors]);\n\n  // Event handlers\n  const handlePickColor = (e) => {\n    const targetColor = roundColors[round - 1].targetColor;\n\n    setResults([...results, { picked: pickedColor, target: targetColor }]);\n    setRoundStage('compare');\n  };\n\n  const handleNextRound = (e) => {\n    console.log('round: ', round);\n    setRoundStage('preview');\n    setRound(round + 1);\n  };\n\n  const handleShowResults = (e) => {\n    setRoundStage('results');\n    // console.log(results);\n  };\n\n  const handleRestartGame = (e) => {\n    console.log('restarting...');\n    setGameActive(true);\n    setRoundColors(generateRounds(totalRounds));\n    setRound(1);\n    setResults([]);\n  };\n\n  const handleBackToStart = (e) => {\n    setGameActive(false);\n    // clearTimeout(timer.current);\n    setRoundStage('new');\n    setRound(totalRounds);\n  };\n\n  const handleSelectMode = (e) => {\n    let mode = e.target.dataset.gamemode;\n    console.log(mode);\n    setgamemode(mode);\n\n    if (\n      userPreferencePreview ||\n      mode === 'Hue' ||\n      mode === 'SatLum' ||\n      mode === 'HSL'\n    ) {\n      setPreview(true);\n    } else {\n      setPreview(false);\n    }\n    handleRestartGame();\n  };\n\n  const handleToggleUserPrefPreview = (e) => {\n    setuserPreferencePreview(!userPreferencePreview);\n  };\n\n  const handleUpdateHighscores = (score) => {\n    // don't update highscore if using a preview (unless a memory gamemode)\n    if (\n      preview &&\n      !(gamemode === 'Hue' || gamemode === 'SatLum' || gamemode === 'HSL')\n    ) {\n      return;\n    }\n\n    if (score > highscores[gamemode]) {\n      setHighscores((prevState) => ({\n        ...prevState,\n        [gamemode]: score,\n      }));\n    }\n  };\n\n\n  return (\n    <div className=\"game-container\">\n      {roundStage !== 'new' &&\n        roundStage !== 'preview' &&\n        roundStage !== 'results' && (\n          <div className=\"back-button-container\">\n            <Button label=\"Back\" handleClick={handleBackToStart} />\n          </div>\n        )}\n      {roundStage === 'new' && (\n        <div className=\"new-game\">\n          <NewGameButtons\n            handleSelectMode={handleSelectMode}\n            handleToggleUserPrefPreview={handleToggleUserPrefPreview}\n            userPreferencePreview={userPreferencePreview}\n          />\n\n          <div>\n            <p>Match the colour shown at the start of each round.</p>\n            <p>Use the Complementary/Triad/Tetrad colours as guides</p>\n            <p>\n              * Lets you preview the target colour. Score don't contribute to\n              highscores. Doesn't apply to memory games.\n            </p>\n          </div>\n          <Highscores highscores={highscores} />\n        </div>\n      )}\n      {roundStage === 'preview' && (\n        <RoundColor color={roundColors[round - 1].targetColor} />\n      )}\n      {roundStage === 'pick' && (\n        <>\n          <ColorPicker\n            pickedColor={pickedColor}\n            setPickedColor={setPickedColor}\n            handlePickColor={handlePickColor}\n            gamemode={gamemode}\n            roundColors={roundColors[round - 1]}          >\n            <h1>Round {round}</h1>\n          </ColorPicker>\n        </>\n      )}\n\n      {roundStage === 'compare' && (\n        <CompareColors\n          round={round}\n          roundColors={roundColors}\n          totalRounds={totalRounds}\n          targetColor={roundColors[round - 1].targetColor}\n          pickedColor={pickedColor}\n          handleNextRound={handleNextRound}\n          handleShowResults={handleShowResults}\n        />\n      )}\n\n      {roundStage === 'results' && (\n        <Results\n          results={results}\n          gamemode={gamemode}\n          roundColorNames={roundColorNames}\n          roundColors={roundColors}\n          handleRestartGame={handleRestartGame}\n          handleBackToStart={handleBackToStart}\n          handleUpdateHighscores={handleUpdateHighscores}\n        />\n      )}\n    </div>\n  );\n}\n","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx",[],"/home/adgk/projects/colourbrain/src/components/About/About.jsx",[],"/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx",[],"/home/adgk/projects/colourbrain/src/tools/colorTools.js",[],"/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/projects/colourbrain/src/components/Button/Button.jsx",[],"/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx",[],"/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx",[],"/home/adgk/projects/colourbrain/src/components/Results/Results.jsx",[],"/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx",[],"/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx",[],"/home/adgk/projects/colourbrain/src/tools/deltaE.js",[],"/home/adgk/projects/colourbrain/src/tools/scoring.js",[],"/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js",[],"/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js",[],"/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx",[],["100","101"],"/home/adgk/projects/colourbrain/src/components/Home/Home.jsx",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":2,"column":27,"nodeType":"108","messageId":"109","endLine":2,"endColumn":33},{"ruleId":"106","severity":1,"message":"110","line":2,"column":35,"nodeType":"108","messageId":"109","endLine":2,"endColumn":41},{"ruleId":"106","severity":1,"message":"111","line":2,"column":43,"nodeType":"108","messageId":"109","endLine":2,"endColumn":48},{"ruleId":"106","severity":1,"message":"112","line":2,"column":50,"nodeType":"108","messageId":"109","endLine":2,"endColumn":54},{"ruleId":"113","severity":1,"message":"114","line":91,"column":6,"nodeType":"115","endLine":91,"endColumn":13,"suggestions":"116"},{"ruleId":"102","replacedBy":"117"},{"ruleId":"104","replacedBy":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gamemode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["121"],["119"],["120"],"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: [gameActive, gamemode, preview, round, roundColors]",{"range":"124","text":"125"},[2969,2976],"[gameActive, gamemode, preview, round, roundColors]"]