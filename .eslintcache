[{"/home/adgk/projects/colourbrain/src/index.js":"1","/home/adgk/projects/colourbrain/src/reportWebVitals.js":"2","/home/adgk/projects/colourbrain/src/App.js":"3","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx":"4","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx":"5","/home/adgk/projects/colourbrain/src/components/About/About.jsx":"6","/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx":"7","/home/adgk/projects/colourbrain/src/tools/colorTools.js":"8","/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx":"9","/home/adgk/projects/colourbrain/src/components/Button/Button.jsx":"10","/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx":"11","/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx":"12","/home/adgk/projects/colourbrain/src/components/Results/Results.jsx":"13","/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx":"14","/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx":"15","/home/adgk/projects/colourbrain/src/tools/deltaE.js":"16","/home/adgk/projects/colourbrain/src/tools/scoring.js":"17","/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js":"18","/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js":"19","/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx":"20","/home/adgk/projects/colourbrain/src/components/Home/Home.jsx":"21","/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx":"22","/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx":"23","/home/adgk/projects/colourbrain/src/components/GridPicker/GridPicker.js":"24"},{"size":525,"mtime":1611250416000,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1610900279000,"results":"27","hashOfConfig":"26"},{"size":2772,"mtime":1611346833000,"results":"28","hashOfConfig":"26"},{"size":11430,"mtime":1611345708000,"results":"29","hashOfConfig":"26"},{"size":135,"mtime":1611157591000,"results":"30","hashOfConfig":"26"},{"size":140,"mtime":1611157591000,"results":"31","hashOfConfig":"26"},{"size":1059,"mtime":1611346854000,"results":"32","hashOfConfig":"26"},{"size":4098,"mtime":1611338643000,"results":"33","hashOfConfig":"26"},{"size":258,"mtime":1610993652000,"results":"34","hashOfConfig":"26"},{"size":370,"mtime":1611260690000,"results":"35","hashOfConfig":"26"},{"size":3454,"mtime":1611338920000,"results":"36","hashOfConfig":"26"},{"size":1462,"mtime":1611331528000,"results":"37","hashOfConfig":"26"},{"size":4918,"mtime":1611341075000,"results":"38","hashOfConfig":"26"},{"size":694,"mtime":1611240981000,"results":"39","hashOfConfig":"26"},{"size":9209,"mtime":1611344840000,"results":"40","hashOfConfig":"26"},{"size":1531,"mtime":1610913524000,"results":"41","hashOfConfig":"26"},{"size":543,"mtime":1611338654000,"results":"42","hashOfConfig":"26"},{"size":958,"mtime":1611331528000,"results":"43","hashOfConfig":"26"},{"size":285,"mtime":1611011721000,"results":"44","hashOfConfig":"26"},{"size":655,"mtime":1611096594000,"results":"45","hashOfConfig":"26"},{"size":173,"mtime":1611346848000,"results":"46","hashOfConfig":"26"},{"size":400,"mtime":1611159140000,"results":"47","hashOfConfig":"26"},{"size":1339,"mtime":1611270507000,"results":"48","hashOfConfig":"26"},{"size":637,"mtime":1611331528000,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1kjysou",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/home/adgk/projects/colourbrain/src/index.js",[],["101","102"],"/home/adgk/projects/colourbrain/src/reportWebVitals.js",[],"/home/adgk/projects/colourbrain/src/App.js",["103"],"import './App.scss';\nimport { useState, useRef } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport Home from './components/Home/Home';\nimport Game from './components/Game/Game';\nimport FAQ from './components/FAQ/FAQ';\nimport About from './components/About/About';\n\nimport Nav from './components/Nav/Nav';\n\nimport useOutsideClick from './components/Hooks/useOutsideClick.jsx';\n\nfunction App() {\n  const [navActive, setNavActive] = useState(false);\n\n  const navRef = useRef();\n\n  useOutsideClick(navRef, () => {\n    if (navActive) {\n      setNavActive(false);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <header className={navActive ? 'header header-nav-active' : ' header '}>\n          <Link to=\"/\">\n            <h1>Colour Brain</h1>\n          </Link>\n\n          <div ref={navRef}>\n            <Nav navActive={navActive} setNavActive={setNavActive} />\n          </div>\n        </header>\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <main>\n          <AnimatePresence exitBeforeEnter>\n            <Switch key={'switch'}>\n              <Route key=\"faq\" path=\"/FAQ\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <FAQ />\n                </motion.div>\n              </Route>\n              <Route key=\"about\" path=\"/about\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <About />\n                </motion.div>\n              </Route>\n              <Route key=\"game\" path=\"/\" exact>\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <Game />\n                </motion.div>\n              </Route>\n\n              {/* <Route key=\"home\" path=\"/\" exact>\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <Home />\n                </motion.div>\n              </Route> */}\n            </Switch>\n          </AnimatePresence>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx",["104","105","106"],"import React, { useEffect, useState, useRef } from 'react';\nimport tinycolor from 'tinycolor2';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ReactComponent as Wheel } from './../../assets/Group_3.svg';\nimport { ReactComponent as ArrowToggle } from './../../assets/arrowToggle.svg';\n\nimport {\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchSL,\n  randomRGBA_matchHS,\n  generateRounds,\n  grayscaleColorRange,\n  shadeColorRange,\n} from './../../tools/colorTools';\nimport './Game.scss';\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport RoundColor from '../RoundColor/RoundColor';\nimport Button from '../Button/Button';\n// import Checkbox from './../Checkbox/Checkbox';\nimport Results from '../Results/Results';\nimport CompareColors from '../CompareColors/CompareColors';\nimport NewGameButtons from '../NewGameButtons/NewGameButtons';\nimport Highscores from '../Highscores/Highscores';\nimport Collapsible from 'react-collapsible';\n// import { ReactComponent as Wheel } from './../../assets/Group_3.svg';\n\n///\n\n///\n\n//must have minimum 2 rounds\n// make these a user adjustable settings option on homepage\nconst totalRounds = 5;\nconst flashTime = 2200; // take into account animation length of previous page unmount\n\nexport default function Game() {\n  const [roundColors, setRoundColors] = useState(generateRounds(totalRounds));\n  const [roundColorNames, setRoundColorNames] = useState([]);\n  const [results, setResults] = useState([]);\n  const [pickedColor, setPickedColor] = useState(randomRGBA([20, 235]));\n  const [round, setRound] = useState(totalRounds); // round number reset at start game (this is not set to 1 to ensure useeffect is triggered)\n  // stages: new, preview, pick, compare, results\n  const [roundStage, setRoundStage] = useState('new');\n  // game modes: Hue, SatLum, HSL\n  const [gamemode, setgamemode] = useState(null);\n  const [preview, setPreview] = useState(true);\n  const [userPreferencePreview, setuserPreferencePreview] = useState(false);\n  const [gameActive, setGameActive] = useState(false);\n  const [highscores, setHighscores] = useState({\n    Hue: 0,\n    SatLum: 0,\n    HSL: 0,\n    CompHue: 0,\n    CompSL: 0,\n    CompHSL: 0,\n    SCompHue: 0,\n    SCompSL: 0,\n    SCompHSL: 0,\n    TriadHue: 0,\n    TriadSL: 0,\n    TriadHSL: 0,\n    TetradHue: 0,\n    TetradSL: 0,\n    TetradHSL: 0,\n    GSLum: 0,\n    GSLumReverse: 0,\n  });\n  const timer = useRef();\n  const isLoaded = useRef(false);\n\n  // Update player colour picking options when moving to next round (i.e. lock in Hue or Sat/Lum dpending on game mode)\n  useEffect(() => {\n    if (gameActive) {\n      const targetColor = roundColors[round - 1].targetColor;\n      switch (gamemode) {\n        case 'Hue':\n        case 'CompHue':\n        case 'SCompHue':\n        case 'TriadHue':\n        case 'TetradHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n          break;\n        case 'SatLum':\n        case 'SCompSL':\n        case 'CompSL':\n        case 'TriadSL':\n        case 'TetradSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        case 'GSLum':\n        case 'GSLumReverse':\n          // random colour from grid@\n          // to do\n          //(this works ok though..)\n          let p = randomRGBA_matchHS(targetColor);\n          setPickedColor(p);\n          // case 'GSLumReverse':\n          // setPickedColor(randomRGBAGrayscale([20, 255]));\n          break;\n\n        // All HSL options get a random colour\n        default:\n          setPickedColor(randomRGBA([20, 235]));\n      }\n      if (preview) {\n        setRoundStage('preview');\n        timer.current = setTimeout(() => {\n          setRoundStage('pick');\n        }, flashTime);\n        return () => clearTimeout(timer.current);\n      } else {\n        setRoundStage('pick');\n      }\n    }\n  }, [round]);\n\n  useEffect(() => {\n    isLoaded.current && gameActive && handleRestartGame();\n\n    return () => {\n      // cleanup;\n    };\n  }, [gamemode]);\n  // Get highscores from local storage\n  useEffect(() => {\n    const data = localStorage.getItem('highscores');\n    if (data) {\n      setHighscores(JSON.parse(data));\n    }\n    return () => {};\n  }, []);\n\n  // Set highscores to local storage\n  useEffect(() => {\n    localStorage.setItem('highscores', JSON.stringify(highscores));\n    return () => {};\n  }, [highscores]);\n\n  // Fetch colour names from API\n  useEffect(() => {\n    if (!isLoaded.current) {\n      isLoaded.current = true;\n      return;\n    }\n    let hexTargets = roundColors.map((round) =>\n      tinycolor.fromRatio(round.targetColor).toHexString()\n    );\n    let requestString = hexTargets.map((t) => t.slice(1)).join(',');\n    // https://github.com/meodai/color-names\n    fetch(`https://api.color.pizza/v1/${requestString}`, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        // console.log('colors', response.colors);\n        let names = response.colors.map((n) => n.name);\n        setRoundColorNames(names);\n      })\n      .catch((error) => console.log(error));\n  }, [roundColors]);\n\n  // Event handlers\n  const handlePickColor = (e) => {\n    setRoundStage('compare');\n    const targetColor = roundColors[round - 1].targetColor;\n    setResults([...results, { picked: pickedColor, target: targetColor }]);\n  };\n\n  const handleNextRound = (e) => {\n    // console.log('round: ', round);\n    setRoundStage('preview');\n    setRound(round + 1);\n  };\n\n  const handleShowResults = (e) => {\n    setRoundStage('results');\n    // console.log(results);\n  };\n\n  const handleRestartGame = (e) => {\n    // console.log('restarting...');\n\n    // console.log(gamemode);\n    if (gamemode === 'GSLumReverse') {\n      // console.log('restarting with reverse');\n      setRoundColors(generateRounds(totalRounds, true));\n    } else {\n      setRoundColors(generateRounds(totalRounds));\n      //\n    }\n    setRound(1);\n    setResults([]);\n  };\n\n  const handleBackToStart = (e) => {\n    // console.log('back to start');\n    setGameActive(false);\n    setgamemode(null);\n    // clearTimeout(timer.current);\n    setRoundStage('new');\n    setRound(totalRounds);\n  };\n\n  const handleSelectMode = (e) => {\n    let mode = e.target.dataset.gamemode;\n    setGameActive(true);\n    setgamemode(mode);\n    // console.log(mode);\n\n    if (\n      userPreferencePreview ||\n      mode === 'Hue' ||\n      mode === 'SatLum' ||\n      mode === 'HSL'\n    ) {\n      setPreview(true);\n    } else {\n      setPreview(false);\n    }\n    // handleRestartGame();\n  };\n\n  const handleToggleUserPrefPreview = (e) => {\n    setuserPreferencePreview(!userPreferencePreview);\n  };\n\n  const handleUpdateHighscores = (score) => {\n    // don't update highscore if using a preview (unless a memory gamemode)\n    if (\n      preview &&\n      !(gamemode === 'Hue' || gamemode === 'SatLum' || gamemode === 'HSL')\n    ) {\n      return;\n    }\n\n    if (score > highscores[gamemode]) {\n      setHighscores((prevState) => ({\n        ...prevState,\n        [gamemode]: score,\n      }));\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <AnimatePresence exitBeforeEnter>\n        {roundStage !== 'new' &&\n          roundStage !== 'preview' &&\n          roundStage !== 'results' && (\n            <motion.div\n              key=\"bbc\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"back-button-container\"\n            >\n              <Button label=\"Back\" handleClick={handleBackToStart} />\n            </motion.div>\n          )}\n\n        {roundStage === 'new' && (\n          <motion.div\n            key=\"ng\"\n            className=\"new-game\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <NewGameButtons\n              key={'buttons'}\n              handleSelectMode={handleSelectMode}\n              handleToggleUserPrefPreview={handleToggleUserPrefPreview}\n              userPreferencePreview={userPreferencePreview}\n            />\n            <div className=\"highscores-collapsible\">\n              <Collapsible\n                key={'collapsible'}\n                triggerClassName=\"collapsible-highscores\"\n                triggerOpenClassName=\"collapsible-highscores\"\n                trigger={\n                  <h2>\n                    <span>My Highscores</span> <ArrowToggle />\n                  </h2>\n                }\n              >\n                <Highscores highscores={highscores} />\n              </Collapsible>\n            </div>\n          </motion.div>\n        )}\n\n        {roundStage === 'pick' && (\n          <motion.div\n            // no animating in if there has been a preview first - looks jarring otherwise\n            initial={preview ? false : { opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6 }}\n            // initial={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <ColorPicker\n              key={'colpick'}\n              pickedColor={pickedColor}\n              setPickedColor={setPickedColor}\n              handlePickColor={handlePickColor}\n              gamemode={gamemode}\n              roundColors={roundColors[round - 1]}\n              gridColors={shadeColorRange(\n                100,\n                roundColors[round - 1].targetColor\n              )}\n              gridColorsReverse={grayscaleColorRange(\n                100,\n                roundColors[round - 1].targetColor\n              )}\n            >\n              <h1>Round {round}</h1>\n            </ColorPicker>\n          </motion.div>\n        )}\n\n        {roundStage === 'compare' && (\n          <motion.div\n            key=\"cmpr\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <CompareColors\n              key={'cmpcol'}\n              round={round}\n              roundColors={roundColors}\n              totalRounds={totalRounds}\n              targetColor={roundColors[round - 1].targetColor}\n              pickedColor={pickedColor}\n              handleNextRound={handleNextRound}\n              handleShowResults={handleShowResults}\n            />\n          </motion.div>\n        )}\n\n        {roundStage === 'results' && (\n          <motion.div\n            key=\"reslts\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <Results\n              key=\"resutls\"\n              results={results}\n              gamemode={gamemode}\n              roundColorNames={roundColorNames}\n              roundColors={roundColors}\n              handleRestartGame={handleRestartGame}\n              handleBackToStart={handleBackToStart}\n              handleUpdateHighscores={handleUpdateHighscores}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {roundStage === 'preview' && (\n        // no exit animation (hence out of animatePresence component)\n        // also for some reason putting it afterwards stops a Flash on screen when preview is off 🤷‍♂️\n        <motion.div\n          key={'prev'}\n          initial={{ opacity: 1, clipPath: `circle(5%)` }}\n          transition={{ duration: 1 }}\n          animate={{ opacity: 1, clipPath: `circle(75%)` }}\n        >\n          <RoundColor key=\"rndcol\" color={roundColors[round - 1].targetColor} />\n        </motion.div>\n      )}\n    </div>\n  );\n}\n","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx",[],"/home/adgk/projects/colourbrain/src/components/About/About.jsx",[],"/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx",[],"/home/adgk/projects/colourbrain/src/tools/colorTools.js",[],"/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/projects/colourbrain/src/components/Button/Button.jsx",[],"/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx",[],"/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx",[],"/home/adgk/projects/colourbrain/src/components/Results/Results.jsx",[],"/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx",[],"/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx",[],"/home/adgk/projects/colourbrain/src/tools/deltaE.js",[],"/home/adgk/projects/colourbrain/src/tools/scoring.js",[],"/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js",[],"/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js",[],"/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx",[],"/home/adgk/projects/colourbrain/src/components/Home/Home.jsx",[],"/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx",[],"/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx",[],"/home/adgk/projects/colourbrain/src/components/GridPicker/GridPicker.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":6,"column":8,"nodeType":"113","messageId":"114","endLine":6,"endColumn":12},{"ruleId":"111","severity":1,"message":"115","line":4,"column":28,"nodeType":"113","messageId":"114","endLine":4,"endColumn":33},{"ruleId":"116","severity":1,"message":"117","line":116,"column":6,"nodeType":"118","endLine":116,"endColumn":13,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"120","line":124,"column":6,"nodeType":"118","endLine":124,"endColumn":16,"suggestions":"121"},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'Wheel' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gamemode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["124"],"React Hook useEffect has missing dependencies: 'gameActive' and 'handleRestartGame'. Either include them or remove the dependency array.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [gameActive, gamemode, preview, round, roundColors]",{"range":"130","text":"131"},"Update the dependencies array to be: [gameActive, gamemode, handleRestartGame]",{"range":"132","text":"133"},[3811,3818],"[gameActive, gamemode, preview, round, roundColors]",[3951,3961],"[gameActive, gamemode, handleRestartGame]"]