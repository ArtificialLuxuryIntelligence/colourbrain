[{"/home/adgk/projects/colourbrain/src/index.js":"1","/home/adgk/projects/colourbrain/src/reportWebVitals.js":"2","/home/adgk/projects/colourbrain/src/App.js":"3","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx":"4","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx":"5","/home/adgk/projects/colourbrain/src/components/About/About.jsx":"6","/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx":"7","/home/adgk/projects/colourbrain/src/tools/colorTools.js":"8","/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx":"9","/home/adgk/projects/colourbrain/src/components/Button/Button.jsx":"10","/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx":"11","/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx":"12","/home/adgk/projects/colourbrain/src/components/Results/Results.jsx":"13","/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx":"14","/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx":"15","/home/adgk/projects/colourbrain/src/tools/deltaE.js":"16","/home/adgk/projects/colourbrain/src/tools/scoring.js":"17","/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js":"18","/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js":"19","/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx":"20","/home/adgk/projects/colourbrain/src/components/Home/Home.jsx":"21","/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx":"22","/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx":"23"},{"size":525,"mtime":1611250416336,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1610900279497,"results":"26","hashOfConfig":"25"},{"size":2773,"mtime":1611270901923,"results":"27","hashOfConfig":"25"},{"size":9929,"mtime":1611240981578,"results":"28","hashOfConfig":"25"},{"size":135,"mtime":1611157591230,"results":"29","hashOfConfig":"25"},{"size":140,"mtime":1611157591226,"results":"30","hashOfConfig":"25"},{"size":1063,"mtime":1611271757306,"results":"31","hashOfConfig":"25"},{"size":2560,"mtime":1611096836344,"results":"32","hashOfConfig":"25"},{"size":258,"mtime":1610993652521,"results":"33","hashOfConfig":"25"},{"size":370,"mtime":1611260690675,"results":"34","hashOfConfig":"25"},{"size":2463,"mtime":1611141551923,"results":"35","hashOfConfig":"25"},{"size":1463,"mtime":1611250416311,"results":"36","hashOfConfig":"25"},{"size":4909,"mtime":1611250416333,"results":"37","hashOfConfig":"25"},{"size":694,"mtime":1611240981582,"results":"38","hashOfConfig":"25"},{"size":6748,"mtime":1611270507508,"results":"39","hashOfConfig":"25"},{"size":1531,"mtime":1610913524693,"results":"40","hashOfConfig":"25"},{"size":543,"mtime":1611062351266,"results":"41","hashOfConfig":"25"},{"size":762,"mtime":1611095190217,"results":"42","hashOfConfig":"25"},{"size":285,"mtime":1611011721284,"results":"43","hashOfConfig":"25"},{"size":655,"mtime":1611096594953,"results":"44","hashOfConfig":"25"},{"size":177,"mtime":1611157591236,"results":"45","hashOfConfig":"25"},{"size":400,"mtime":1611159140112,"results":"46","hashOfConfig":"25"},{"size":1339,"mtime":1611270507514,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1kjysou",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/home/adgk/projects/colourbrain/src/index.js",[],["97","98"],"/home/adgk/projects/colourbrain/src/reportWebVitals.js",[],"/home/adgk/projects/colourbrain/src/App.js",["99"],"/home/adgk/projects/colourbrain/src/components/Game/Game.jsx",["100","101"],"import React, { useEffect, useState, useRef } from 'react';\nimport tinycolor from 'tinycolor2';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport {\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchSL,\n  generateRounds,\n} from './../../tools/colorTools';\nimport './Game.scss';\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport RoundColor from '../RoundColor/RoundColor';\nimport Button from '../Button/Button';\n// import Checkbox from './../Checkbox/Checkbox';\nimport Results from '../Results/Results';\nimport CompareColors from '../CompareColors/CompareColors';\nimport NewGameButtons from '../NewGameButtons/NewGameButtons';\nimport Highscores from '../Highscores/Highscores';\nimport Collapsible from 'react-collapsible';\nimport { Link } from 'react-router-dom';\n\n//must have minimum 2 rounds\n// make these a user adjustable settings option on homepage\nconst totalRounds = 2;\nconst flashTime = 2200; // take into account animation length of previous page unmount\n\nexport default function Game() {\n  const [roundColors, setRoundColors] = useState(generateRounds(totalRounds));\n  const [roundColorNames, setRoundColorNames] = useState([]);\n  const [results, setResults] = useState([]);\n  const [pickedColor, setPickedColor] = useState(randomRGBA([20, 235]));\n  const [round, setRound] = useState(totalRounds); // round number reset at start game (this is not set to 1 to ensure useeffect is triggered)\n  // stages: new, preview, pick, compare, results\n  const [roundStage, setRoundStage] = useState('new');\n  // game modes: Hue, SatLum, HSL\n  const [gamemode, setgamemode] = useState('Hue');\n  const [preview, setPreview] = useState(true);\n  const [userPreferencePreview, setuserPreferencePreview] = useState(false);\n  const [gameActive, setGameActive] = useState(false);\n  const [highscores, setHighscores] = useState({\n    Hue: 0,\n    SatLum: 0,\n    HSL: 0,\n    CompHue: 0,\n    CompSL: 0,\n    CompHSL: 0,\n    SCompHue: 0,\n    SCompSL: 0,\n    SCompHSL: 0,\n    TriadHue: 0,\n    TriadSL: 0,\n    TriadHSL: 0,\n    TetradHue: 0,\n    TetradSL: 0,\n    TetradHSL: 0,\n  });\n  const timer = useRef();\n  const isLoaded = useRef(false);\n\n  // Update player colour options when moving to next round (i.e. lock in Hue or Sat/Lum dpending on game mode)\n  useEffect(() => {\n    if (gameActive) {\n      const targetColor = roundColors[round - 1].targetColor;\n      switch (gamemode) {\n        case 'Hue':\n        case 'CompHue':\n        case 'SCompHue':\n        case 'TriadHue':\n        case 'TetradHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n          break;\n        case 'SatLum':\n        case 'SCompSL':\n        case 'CompSL':\n        case 'TriadSL':\n        case 'TetradSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        // All HSL options get a random colour\n        default:\n          setPickedColor(randomRGBA([20, 235]));\n      }\n      if (preview) {\n        setRoundStage('preview');\n        timer.current = setTimeout(() => {\n          setRoundStage('pick');\n        }, flashTime);\n        return () => clearTimeout(timer.current);\n      } else {\n        setRoundStage('pick');\n      }\n    }\n  }, [round]);\n\n  // Get highscores from local storage\n  useEffect(() => {\n    const data = localStorage.getItem('highscores');\n    if (data) {\n      setHighscores(JSON.parse(data));\n    }\n    return () => {};\n  }, []);\n\n  // Set highscores to local storage\n  useEffect(() => {\n    localStorage.setItem('highscores', JSON.stringify(highscores));\n    return () => {};\n  }, [highscores]);\n\n  // Fetch colour names from API\n  useEffect(() => {\n    if (!isLoaded.current) {\n      isLoaded.current = true;\n      return;\n    }\n    let hexTargets = roundColors.map((round) =>\n      tinycolor.fromRatio(round.targetColor).toHexString()\n    );\n    let requestString = hexTargets.map((t) => t.slice(1)).join(',');\n    // https://github.com/meodai/color-names\n    fetch(`https://api.color.pizza/v1/${requestString}`, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        // console.log('colors', response.colors);\n        let names = response.colors.map((n) => n.name);\n        setRoundColorNames(names);\n      })\n      .catch((error) => console.log(error));\n  }, [roundColors]);\n\n  // Event handlers\n  const handlePickColor = (e) => {\n    setRoundStage('compare');\n    const targetColor = roundColors[round - 1].targetColor;\n    setResults([...results, { picked: pickedColor, target: targetColor }]);\n  };\n\n  const handleNextRound = (e) => {\n    console.log('round: ', round);\n    setRoundStage('preview');\n    setRound(round + 1);\n  };\n\n  const handleShowResults = (e) => {\n    setRoundStage('results');\n    // console.log(results);\n  };\n\n  const handleRestartGame = (e) => {\n    console.log('restarting...');\n    setGameActive(true);\n    setRoundColors(generateRounds(totalRounds));\n    setRound(1);\n    setResults([]);\n  };\n\n  const handleBackToStart = (e) => {\n    console.log('back to start');\n    setGameActive(false);\n    // clearTimeout(timer.current);\n    setRoundStage('new');\n    setRound(totalRounds);\n  };\n\n  const handleSelectMode = (e) => {\n    let mode = e.target.dataset.gamemode;\n    console.log(mode);\n    setgamemode(mode);\n\n    if (\n      userPreferencePreview ||\n      mode === 'Hue' ||\n      mode === 'SatLum' ||\n      mode === 'HSL'\n    ) {\n      setPreview(true);\n    } else {\n      setPreview(false);\n    }\n    handleRestartGame();\n  };\n\n  const handleToggleUserPrefPreview = (e) => {\n    setuserPreferencePreview(!userPreferencePreview);\n  };\n\n  const handleUpdateHighscores = (score) => {\n    // don't update highscore if using a preview (unless a memory gamemode)\n    if (\n      preview &&\n      !(gamemode === 'Hue' || gamemode === 'SatLum' || gamemode === 'HSL')\n    ) {\n      return;\n    }\n\n    if (score > highscores[gamemode]) {\n      setHighscores((prevState) => ({\n        ...prevState,\n        [gamemode]: score,\n      }));\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <AnimatePresence exitBeforeEnter>\n        {roundStage !== 'new' &&\n          roundStage !== 'preview' &&\n          roundStage !== 'results' && (\n            <motion.div\n              key=\"bbc\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"back-button-container\"\n            >\n              <Button label=\"Back\" handleClick={handleBackToStart} />\n            </motion.div>\n          )}\n\n        {roundStage === 'new' && (\n          <motion.div\n            key=\"ng\"\n            className=\"new-game\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <NewGameButtons\n              key={'buttons'}\n              handleSelectMode={handleSelectMode}\n              handleToggleUserPrefPreview={handleToggleUserPrefPreview}\n              userPreferencePreview={userPreferencePreview}\n            />\n\n            <Collapsible\n              key={'collapsible'}\n              triggerClassName=\"collapsible-highscores\"\n              triggerOpenClassName=\"collapsible-highscores\"\n              trigger=\"Highscores\"\n            >\n              <Highscores highscores={highscores} />\n            </Collapsible>\n          </motion.div>\n        )}\n\n        {roundStage === 'pick' && (\n          <motion.div\n            // no animating in if there has been a preview first - looks jarring otherwise\n            initial={preview ? false : { opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6 }}\n            // initial={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <ColorPicker\n              key={'colpick'}\n              pickedColor={pickedColor}\n              setPickedColor={setPickedColor}\n              handlePickColor={handlePickColor}\n              gamemode={gamemode}\n              roundColors={roundColors[round - 1]}\n            >\n              <h1>Round {round}</h1>\n            </ColorPicker>\n          </motion.div>\n        )}\n\n        {roundStage === 'compare' && (\n          <motion.div\n            key=\"cmpr\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <CompareColors\n              key={'cmpcol'}\n              round={round}\n              roundColors={roundColors}\n              totalRounds={totalRounds}\n              targetColor={roundColors[round - 1].targetColor}\n              pickedColor={pickedColor}\n              handleNextRound={handleNextRound}\n              handleShowResults={handleShowResults}\n            />\n          </motion.div>\n        )}\n\n        {roundStage === 'results' && (\n          <motion.div\n            key=\"reslts\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <Results\n              key=\"resutls\"\n              results={results}\n              gamemode={gamemode}\n              roundColorNames={roundColorNames}\n              roundColors={roundColors}\n              handleRestartGame={handleRestartGame}\n              handleBackToStart={handleBackToStart}\n              handleUpdateHighscores={handleUpdateHighscores}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {roundStage === 'preview' && (\n        // no exit animation (hence out of animatePresence component)\n        // also for some reason putting it afterwards stops a Flash on screen when preview is off 🤷‍♂️\n        <motion.div\n          key={'prev'}\n          initial={{ opacity: 1, clipPath: `circle(5%)` }}\n          transition={{ duration: 1 }}\n          animate={{ opacity: 1, clipPath: `circle(75%)` }}\n        >\n          <RoundColor key=\"rndcol\" color={roundColors[round - 1].targetColor} />\n        </motion.div>\n      )}\n    </div>\n  );\n}\n","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx",[],"/home/adgk/projects/colourbrain/src/components/About/About.jsx",[],"/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx",[],"/home/adgk/projects/colourbrain/src/tools/colorTools.js",[],"/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/projects/colourbrain/src/components/Button/Button.jsx",[],"/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx",[],"/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx",[],"/home/adgk/projects/colourbrain/src/components/Results/Results.jsx",[],"/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx",[],"/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx",["102","103"],"import React, { useState } from 'react';\nimport Collapsible from 'react-collapsible';\n\nimport './NewGameButtons.scss';\nimport Button from '../Button/Button';\nimport SVGButton from '../SVGButton/SVGButton';\nimport Checkbox from '../Checkbox/Checkbox';\n\nimport { ReactComponent as Wheel } from './../../assets/Group_3.svg';\nimport { ReactComponent as ArrowToggle } from './../../assets/arrowToggle.svg';\nimport { ReactComponent as Ax1 } from './../../assets/ax-1.svg';\nimport { ReactComponent as Ax2 } from './../../assets/ax-2.svg';\nimport { ReactComponent as Ax3 } from './../../assets/ax-3.svg';\n\nexport default function NewGameButtons({\n  handleSelectMode,\n  handleToggleUserPrefPreview,\n  userPreferencePreview,\n}) {\n  return (\n    <div className=\"new-game-buttons\">\n      <ul>\n        <li>\n          <Collapsible\n            triggerClassName=\"collapsible-memory\"\n            triggerOpenedClassName=\"collapsible-memory\"\n            lazyRender={true}\n            trigger={\n              <h2>\n                <Wheel />\n                Memory <ArrowToggle />\n              </h2>\n            }\n            open={true}\n          >\n            <div className=\"memory\">\n              <h3>\n                <Wheel />\n                Memory\n              </h3>\n              <div className=\"btn-cont\">\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  label=\"Hue\"\n                  Icon={Ax1}\n                  data=\"Hue\"\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  label={'Saturation Luminance'}\n                  Icon={Ax2}\n                  data=\"SatLum\"\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"HSL\"\n                  label={'Hue Saturation Luminance'}\n                  Icon={Ax3}\n                  handleClick={handleSelectMode}\n                />\n              </div>\n            </div>\n          </Collapsible>\n        </li>\n        <li>\n          <Collapsible\n            triggerClassName=\"collapsible-harmonies\"\n            triggerOpenedClassName=\"collapsible-harmonies\"\n            trigger={\n              <h2>\n                <Wheel />\n                Harmony <ArrowToggle />\n              </h2>\n            }\n            lazyRender={true}\n          >\n            <div className=\"complement\">\n              <h3>\n                <Wheel />\n                <span>Complement</span>\n              </h3>\n              <div className=\"btn-cont\">\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"CompHue\"\n                  label=\"Hue\"\n                  Icon={Ax1}\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"CompSL\"\n                  label={'Saturation Luminance'}\n                  Icon={Ax2}\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"CompHSL\"\n                  label={'Hue Saturation Luminance'}\n                  Icon={Ax3}\n                  handleClick={handleSelectMode}\n                />\n              </div>\n            </div>\n\n            <div className=\"split-complement\">\n              <h3>\n                <Wheel />\n                <span>Split-Complement</span>\n              </h3>\n              <div className=\"btn-cont\">\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"SCompHue\"\n                  label=\"Hue\"\n                  Icon={Ax1}\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"SCompSL\"\n                  label={'Saturation Luminance'}\n                  Icon={Ax2}\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"SCompHSL\"\n                  label={'Hue Saturation Luminance'}\n                  Icon={Ax3}\n                  handleClick={handleSelectMode}\n                />\n              </div>\n            </div>\n\n            <div className=\"triad\">\n              <h3>\n                <Wheel />\n                <span>Triad</span>\n              </h3>\n              <div className=\"btn-cont\">\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"TriadHue\"\n                  label=\"Hue\"\n                  Icon={Ax1}\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"TriadSL\"\n                  label={'Saturation Luminance'}\n                  Icon={Ax2}\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"TriadHSL\"\n                  label={'Hue Saturation Luminance'}\n                  Icon={Ax3}\n                  handleClick={handleSelectMode}\n                />\n              </div>\n            </div>\n\n            <div className=\"tetrad\">\n              <h3>\n                <Wheel />\n                <span>Tetrad</span>\n              </h3>\n              <div className=\"btn-cont\">\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"TetradHue\"\n                  label=\"Hue\"\n                  Icon={Ax1}\n                  handleClick={handleSelectMode}\n                />\n\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"TetradSL\"\n                  label={'Saturation Luminance'}\n                  Icon={Ax2}\n                  handleClick={handleSelectMode}\n                />\n                <SVGButton\n                  dataKey=\"gamemode\"\n                  data=\"TetradHSL\"\n                  label={'Hue Saturation Luminance'}\n                  Icon={Ax3}\n                  handleClick={handleSelectMode}\n                />\n              </div>\n            </div>\n          </Collapsible>\n        </li>\n      </ul>\n\n      {/* custom game with checkbox to choose which modes to include */}\n      <div className=\"user-options\">\n        <h4>Stuck? </h4>\n        <Checkbox\n          label={'Colour preview '}\n          handleChange={handleToggleUserPrefPreview}\n          checked={userPreferencePreview}\n        />\n        <div>\n          <small>\n            Lets you preview the colour. (Score don't contribute to highscores.\n            Doesn't apply to memory games).\n          </small>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/adgk/projects/colourbrain/src/tools/deltaE.js",[],"/home/adgk/projects/colourbrain/src/tools/scoring.js",[],"/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js",[],"/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js",[],"/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx",[],"/home/adgk/projects/colourbrain/src/components/Home/Home.jsx",[],"/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx",[],"/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":20,"nodeType":"110","messageId":"111","endLine":2,"endColumn":29},{"ruleId":"108","severity":1,"message":"112","line":21,"column":10,"nodeType":"110","messageId":"111","endLine":21,"endColumn":14},{"ruleId":"113","severity":1,"message":"114","line":94,"column":6,"nodeType":"115","endLine":94,"endColumn":13,"suggestions":"116"},{"ruleId":"108","severity":1,"message":"117","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"118","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":14},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gamemode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["121"],"'useState' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: [gameActive, gamemode, preview, round, roundColors]",{"range":"124","text":"125"},[3175,3182],"[gameActive, gamemode, preview, round, roundColors]"]