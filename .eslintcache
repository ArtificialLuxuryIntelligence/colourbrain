[{"/home/adgk/projects/colourbrain/src/index.js":"1","/home/adgk/projects/colourbrain/src/reportWebVitals.js":"2","/home/adgk/projects/colourbrain/src/App.js":"3","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx":"4","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx":"5","/home/adgk/projects/colourbrain/src/components/About/About.jsx":"6","/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx":"7","/home/adgk/projects/colourbrain/src/tools/colorTools.js":"8","/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx":"9","/home/adgk/projects/colourbrain/src/components/Button/Button.jsx":"10","/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx":"11","/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx":"12","/home/adgk/projects/colourbrain/src/components/Results/Results.jsx":"13","/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx":"14","/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx":"15","/home/adgk/projects/colourbrain/src/tools/deltaE.js":"16","/home/adgk/projects/colourbrain/src/tools/scoring.js":"17","/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js":"18","/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js":"19","/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx":"20","/home/adgk/projects/colourbrain/src/components/Home/Home.jsx":"21","/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx":"22","/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx":"23","/home/adgk/projects/colourbrain/src/components/GridPicker/GridPicker.js":"24"},{"size":525,"mtime":1611250416336,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1610900279497,"results":"27","hashOfConfig":"26"},{"size":2773,"mtime":1611270901923,"results":"28","hashOfConfig":"26"},{"size":11171,"mtime":1611331528154,"results":"29","hashOfConfig":"26"},{"size":135,"mtime":1611157591230,"results":"30","hashOfConfig":"26"},{"size":140,"mtime":1611157591226,"results":"31","hashOfConfig":"26"},{"size":1063,"mtime":1611271757306,"results":"32","hashOfConfig":"26"},{"size":4071,"mtime":1611331528175,"results":"33","hashOfConfig":"26"},{"size":258,"mtime":1610993652521,"results":"34","hashOfConfig":"26"},{"size":370,"mtime":1611260690675,"results":"35","hashOfConfig":"26"},{"size":4093,"mtime":1611331528141,"results":"36","hashOfConfig":"26"},{"size":1462,"mtime":1611331528149,"results":"37","hashOfConfig":"26"},{"size":4908,"mtime":1611331528171,"results":"38","hashOfConfig":"26"},{"size":694,"mtime":1611240981582,"results":"39","hashOfConfig":"26"},{"size":9262,"mtime":1611338376825,"results":"40","hashOfConfig":"26"},{"size":1531,"mtime":1610913524693,"results":"41","hashOfConfig":"26"},{"size":579,"mtime":1611331528182,"results":"42","hashOfConfig":"26"},{"size":958,"mtime":1611331528178,"results":"43","hashOfConfig":"26"},{"size":285,"mtime":1611011721284,"results":"44","hashOfConfig":"26"},{"size":655,"mtime":1611096594953,"results":"45","hashOfConfig":"26"},{"size":177,"mtime":1611157591236,"results":"46","hashOfConfig":"26"},{"size":400,"mtime":1611159140112,"results":"47","hashOfConfig":"26"},{"size":1339,"mtime":1611270507514,"results":"48","hashOfConfig":"26"},{"size":637,"mtime":1611331528156,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1kjysou",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/home/adgk/projects/colourbrain/src/index.js",[],["104","105"],"/home/adgk/projects/colourbrain/src/reportWebVitals.js",[],"/home/adgk/projects/colourbrain/src/App.js",["106"],"import './App.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport Home from './components/Home/Home';\nimport Game from './components/Game/Game';\nimport FAQ from './components/FAQ/FAQ';\nimport About from './components/About/About';\n\nimport Nav from './components/Nav/Nav';\n\nimport useOutsideClick from './components/Hooks/useOutsideClick.jsx';\n\nfunction App() {\n  const [navActive, setNavActive] = useState(false);\n\n  const navRef = useRef();\n\n  useOutsideClick(navRef, () => {\n    if (navActive) {\n      setNavActive(false);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <header className={navActive ? 'header header-nav-active' : ' header '}>\n          <Link to=\"/\">\n            <h1>Colour Brain</h1>\n          </Link>\n\n          <div ref={navRef}>\n            <Nav navActive={navActive} setNavActive={setNavActive} />\n          </div>\n        </header>\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <main>\n          <AnimatePresence exitBeforeEnter>\n            <Switch key={'switch'}>\n              <Route key=\"faq\" path=\"/FAQ\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <FAQ />\n                </motion.div>\n              </Route>\n              <Route key=\"about\" path=\"/about\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <About />\n                </motion.div>\n              </Route>\n              <Route key=\"game\" path=\"/play\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <Game />\n                </motion.div>\n              </Route>\n\n              <Route key=\"home\" path=\"/\" exact>\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <Home />\n                </motion.div>\n              </Route>\n            </Switch>\n          </AnimatePresence>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx",["107","108","109"],"import React, { useEffect, useState, useRef } from 'react';\nimport tinycolor from 'tinycolor2';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport {\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchSL,\n  randomRGBA_matchHS,\n  generateRounds,\n  grayscaleColorRange,\n  shadeColorRange,\n} from './../../tools/colorTools';\nimport './Game.scss';\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport RoundColor from '../RoundColor/RoundColor';\nimport Button from '../Button/Button';\n// import Checkbox from './../Checkbox/Checkbox';\nimport Results from '../Results/Results';\nimport CompareColors from '../CompareColors/CompareColors';\nimport NewGameButtons from '../NewGameButtons/NewGameButtons';\nimport Highscores from '../Highscores/Highscores';\nimport Collapsible from 'react-collapsible';\nimport { Link } from 'react-router-dom';\n\n///\n// let a = grayscaleColorRange(100);\nlet a = shadeColorRange(100, { r: 200, g: 100, b: 40, a: 1 });\n\nconsole.log('frar', a);\n\n///\n\n//must have minimum 2 rounds\n// make these a user adjustable settings option on homepage\nconst totalRounds = 2;\nconst flashTime = 2200; // take into account animation length of previous page unmount\n\nexport default function Game() {\n  const [roundColors, setRoundColors] = useState(generateRounds(totalRounds));\n  const [roundColorNames, setRoundColorNames] = useState([]);\n  const [results, setResults] = useState([]);\n  const [pickedColor, setPickedColor] = useState(randomRGBA([20, 235]));\n  const [round, setRound] = useState(totalRounds); // round number reset at start game (this is not set to 1 to ensure useeffect is triggered)\n  // stages: new, preview, pick, compare, results\n  const [roundStage, setRoundStage] = useState('new');\n  // game modes: Hue, SatLum, HSL\n  const [gamemode, setgamemode] = useState(null);\n  const [preview, setPreview] = useState(true);\n  const [userPreferencePreview, setuserPreferencePreview] = useState(false);\n  const [gameActive, setGameActive] = useState(false);\n  const [highscores, setHighscores] = useState({\n    Hue: 0,\n    SatLum: 0,\n    HSL: 0,\n    CompHue: 0,\n    CompSL: 0,\n    CompHSL: 0,\n    SCompHue: 0,\n    SCompSL: 0,\n    SCompHSL: 0,\n    TriadHue: 0,\n    TriadSL: 0,\n    TriadHSL: 0,\n    TetradHue: 0,\n    TetradSL: 0,\n    TetradHSL: 0,\n    GSLum: 0,\n    GSLumReverse: 0,\n  });\n  const timer = useRef();\n  const isLoaded = useRef(false);\n\n  // Update player colour options when moving to next round (i.e. lock in Hue or Sat/Lum dpending on game mode)\n  useEffect(() => {\n    if (gameActive) {\n      const targetColor = roundColors[round - 1].targetColor;\n      switch (gamemode) {\n        case 'Hue':\n        case 'CompHue':\n        case 'SCompHue':\n        case 'TriadHue':\n        case 'TetradHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n          break;\n        case 'SatLum':\n        case 'SCompSL':\n        case 'CompSL':\n        case 'TriadSL':\n        case 'TetradSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        case 'GSLum':\n        case 'GSLumReverse':\n          // random colour from grid@\n          // to do\n          //(this works ok though..)\n          let p = randomRGBA_matchHS(targetColor);\n          setPickedColor(p);\n          // case 'GSLumReverse':\n          // setPickedColor(randomRGBAGrayscale([20, 255]));\n          break;\n\n        // All HSL options get a random colour\n        default:\n          setPickedColor(randomRGBA([20, 235]));\n      }\n      if (preview) {\n        setRoundStage('preview');\n        timer.current = setTimeout(() => {\n          setRoundStage('pick');\n        }, flashTime);\n        return () => clearTimeout(timer.current);\n      } else {\n        setRoundStage('pick');\n      }\n    }\n  }, [round]);\n\n  useEffect(() => {\n    isLoaded.current && gameActive && handleRestartGame();\n\n    return () => {\n      // cleanup;\n    };\n  }, [gamemode]);\n  // Get highscores from local storage\n  useEffect(() => {\n    const data = localStorage.getItem('highscores');\n    if (data) {\n      setHighscores(JSON.parse(data));\n    }\n    return () => {};\n  }, []);\n\n  // Set highscores to local storage\n  useEffect(() => {\n    localStorage.setItem('highscores', JSON.stringify(highscores));\n    return () => {};\n  }, [highscores]);\n\n  // Fetch colour names from API\n  useEffect(() => {\n    if (!isLoaded.current) {\n      isLoaded.current = true;\n      return;\n    }\n    let hexTargets = roundColors.map((round) =>\n      tinycolor.fromRatio(round.targetColor).toHexString()\n    );\n    let requestString = hexTargets.map((t) => t.slice(1)).join(',');\n    // https://github.com/meodai/color-names\n    fetch(`https://api.color.pizza/v1/${requestString}`, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        // console.log('colors', response.colors);\n        let names = response.colors.map((n) => n.name);\n        setRoundColorNames(names);\n      })\n      .catch((error) => console.log(error));\n  }, [roundColors]);\n\n  // Event handlers\n  const handlePickColor = (e) => {\n    setRoundStage('compare');\n    const targetColor = roundColors[round - 1].targetColor;\n    setResults([...results, { picked: pickedColor, target: targetColor }]);\n  };\n\n  const handleNextRound = (e) => {\n    console.log('round: ', round);\n    setRoundStage('preview');\n    setRound(round + 1);\n  };\n\n  const handleShowResults = (e) => {\n    setRoundStage('results');\n    // console.log(results);\n  };\n\n  const handleRestartGame = (e) => {\n    console.log('restarting...');\n\n    console.log(gamemode);\n    if (gamemode === 'GSLumReverse') {\n      console.log('restarting with reverse');\n      setRoundColors(generateRounds(totalRounds, true));\n    } else {\n      console.log('gsgsg');\n      setRoundColors(generateRounds(totalRounds));\n      //\n    }\n    setRound(1);\n    setResults([]);\n  };\n\n  const handleBackToStart = (e) => {\n    console.log('back to start');\n    setGameActive(false);\n    setgamemode(null);\n    // clearTimeout(timer.current);\n    setRoundStage('new');\n    setRound(totalRounds);\n  };\n\n  const handleSelectMode = (e) => {\n    let mode = e.target.dataset.gamemode;\n    setGameActive(true);\n    setgamemode(mode);\n    console.log(mode);\n\n    if (\n      userPreferencePreview ||\n      mode === 'Hue' ||\n      mode === 'SatLum' ||\n      mode === 'HSL'\n    ) {\n      setPreview(true);\n    } else {\n      setPreview(false);\n    }\n    // handleRestartGame();\n  };\n\n  const handleToggleUserPrefPreview = (e) => {\n    setuserPreferencePreview(!userPreferencePreview);\n  };\n\n  const handleUpdateHighscores = (score) => {\n    // don't update highscore if using a preview (unless a memory gamemode)\n    if (\n      preview &&\n      !(gamemode === 'Hue' || gamemode === 'SatLum' || gamemode === 'HSL')\n    ) {\n      return;\n    }\n\n    if (score > highscores[gamemode]) {\n      setHighscores((prevState) => ({\n        ...prevState,\n        [gamemode]: score,\n      }));\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <AnimatePresence exitBeforeEnter>\n        {roundStage !== 'new' &&\n          roundStage !== 'preview' &&\n          roundStage !== 'results' && (\n            <motion.div\n              key=\"bbc\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"back-button-container\"\n            >\n              <Button label=\"Back\" handleClick={handleBackToStart} />\n            </motion.div>\n          )}\n\n        {roundStage === 'new' && (\n          <motion.div\n            key=\"ng\"\n            className=\"new-game\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <NewGameButtons\n              key={'buttons'}\n              handleSelectMode={handleSelectMode}\n              handleToggleUserPrefPreview={handleToggleUserPrefPreview}\n              userPreferencePreview={userPreferencePreview}\n            />\n\n            <Collapsible\n              key={'collapsible'}\n              triggerClassName=\"collapsible-highscores\"\n              triggerOpenClassName=\"collapsible-highscores\"\n              trigger=\"Highscores\"\n            >\n              <Highscores highscores={highscores} />\n            </Collapsible>\n          </motion.div>\n        )}\n\n        {roundStage === 'pick' && (\n          <motion.div\n            // no animating in if there has been a preview first - looks jarring otherwise\n            initial={preview ? false : { opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6 }}\n            // initial={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <ColorPicker\n              key={'colpick'}\n              pickedColor={pickedColor}\n              setPickedColor={setPickedColor}\n              handlePickColor={handlePickColor}\n              gamemode={gamemode}\n              roundColors={roundColors[round - 1]}\n              gridColors={shadeColorRange(\n                100,\n                roundColors[round - 1].targetColor\n              )}\n              gridColorsReverse={grayscaleColorRange(\n                100,\n                roundColors[round - 1].targetColor\n              )}\n            >\n              <h1>Round {round}</h1>\n            </ColorPicker>\n          </motion.div>\n        )}\n\n        {roundStage === 'compare' && (\n          <motion.div\n            key=\"cmpr\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <CompareColors\n              key={'cmpcol'}\n              round={round}\n              roundColors={roundColors}\n              totalRounds={totalRounds}\n              targetColor={roundColors[round - 1].targetColor}\n              pickedColor={pickedColor}\n              handleNextRound={handleNextRound}\n              handleShowResults={handleShowResults}\n            />\n          </motion.div>\n        )}\n\n        {roundStage === 'results' && (\n          <motion.div\n            key=\"reslts\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <Results\n              key=\"resutls\"\n              results={results}\n              gamemode={gamemode}\n              roundColorNames={roundColorNames}\n              roundColors={roundColors}\n              handleRestartGame={handleRestartGame}\n              handleBackToStart={handleBackToStart}\n              handleUpdateHighscores={handleUpdateHighscores}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {roundStage === 'preview' && (\n        // no exit animation (hence out of animatePresence component)\n        // also for some reason putting it afterwards stops a Flash on screen when preview is off 🤷‍♂️\n        <motion.div\n          key={'prev'}\n          initial={{ opacity: 1, clipPath: `circle(5%)` }}\n          transition={{ duration: 1 }}\n          animate={{ opacity: 1, clipPath: `circle(75%)` }}\n        >\n          <RoundColor key=\"rndcol\" color={roundColors[round - 1].targetColor} />\n        </motion.div>\n      )}\n    </div>\n  );\n}\n","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx",[],"/home/adgk/projects/colourbrain/src/components/About/About.jsx",[],"/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx",[],"/home/adgk/projects/colourbrain/src/tools/colorTools.js",["110"],"import deltaE from './deltaE';\nimport tinycolor from 'tinycolor2';\n\nconst colorDifference = (c1, c2) => {\n  // params rgb objects\n  const { r, g, b } = c1;\n  const { r: rp, g: gp, b: bp } = c2;\n  let delta = deltaE([r, g, b], [rp, gp, bp]);\n  return delta;\n};\n\n// separate into own files?\nconst randomRGBA = (range = [0, 255], a = 1) => {\n  return {\n    r: randomInRange(range),\n    g: randomInRange(range),\n    b: randomInRange(range),\n    a,\n  };\n};\n\nconst randomRGBAGray = (range = [0, 255], a = 1) => {\n  let val = randomInRange(range);\n  return {\n    r: val,\n    g: val,\n    b: val,\n    a,\n  };\n};\n\n// returns random rgba object with same saturation and luminosity as input color (different hue)\nconst randomRGBA_matchSL = (color) => {\n  let hsl = tinycolor.fromRatio(color).toHsl();\n  let hue = Math.random();\n  hsl.h = hue;\n  let rgb = tinycolor(hsl).toRgb();\n  return rgb;\n};\n\n// returns random rgba object with different saturation and luminosity as input color (same hue)\nconst randomRGBA_matchH = (color) => {\n  let hsl = tinycolor.fromRatio(color).toHsl();\n  let sat = Math.random();\n  let lum = Math.random();\n  hsl.s = sat;\n  hsl.l = lum;\n  let rgb = tinycolor(hsl).toRgb();\n  return rgb;\n};\n\nconst randomRGBA_matchHS = (color) => {\n  let hsl = tinycolor.fromRatio(color).toHsl();\n  // let lum = Math.random();\n  // hsl.l = lum;\n\n  let lum = Math.random();\n  hsl.l = lum;\n\n  let rgb = tinycolor(hsl).toRgb();\n  return rgb;\n};\n\nconst colorCombos = (color) => {\n  const complement = tinycolor(color).complement().toRgbString();\n\n  //Thetinycolor built in method rotates the hue by too much in my opinion (normal is 150 and 210 degs from base colour)\n  // let splitComplement = tinycolor(color)\n  //   .splitcomplement()\n  //   .map((c) => c.toRgbString());\n\n  // console.log('SCOMP', splitComplement, color);\n\n  let grayscale = tinycolor(color).greyscale().toRgbString();\n\n  let splitComplement = splitComp(color);\n\n  let triad = tinycolor(color)\n    .triad()\n    .map((c) => c.toRgbString());\n  let tetrad = tinycolor(color)\n    .tetrad()\n    .map((c) => c.toRgbString());\n\n  //remove original colors\n  triad.shift();\n  tetrad.shift();\n  return {\n    target: tinycolor(color).toRgbString(),\n    grayscale,\n    complement,\n    splitComplement,\n    triad,\n    tetrad,\n  };\n};\n\n// --- util\nconst randomInRange = (range = [0, 1]) => {\n  let [min, max] = range;\n  return Math.random() * (max - min) + min;\n};\n\nconst splitComp = (color) => {\n  return [\n    tinycolor(color).spin(150).toRgbString(),\n    tinycolor(color).spin(210).toRgbString(),\n  ];\n};\n\nconst generateRounds = (rounds, grayScale = false) => {\n  let res = [];\n  let r = 0;\n  while (r < rounds) {\n    let targetColor;\n\n    targetColor = randomRGBA([25, 230]);\n\n    const {\n      grayscale,\n      complement,\n      splitComplement,\n      triad,\n      tetrad,\n    } = colorCombos(targetColor);\n\n    res.push({\n      targetColor: grayScale ? tinycolor(grayscale).toRgb() : targetColor,\n      color: tinycolor(targetColor).toString(),\n      grayscale,\n      complement,\n      splitComplement,\n      triad,\n      tetrad,\n    });\n    r++;\n  }\n  return res;\n};\n\n// make an array from white to black\nconst grayscaleColorRange = (n) => {\n  let res = [];\n  let inc = 255 / (n + 1);\n  let v = 0;\n  for (let i = 0; i < n; i++) {\n    res.push({ r: v, g: v, b: v });\n    // res.push(`rgb(${v},${v},${v})`);\n    v += inc;\n  }\n  return res;\n};\n\n// makes array of single colour in all shades (n divisions)\nconst shadeColorRange = (n, color) => {\n  let res = [];\n  let hsl = tinycolor(color).toHsl();\n  let { h, s, l } = hsl;\n  let inc = 1 / (n + 1);\n  // let val = 0;\n  let val = l % inc;\n  for (let i = 0; i < n; i++) {\n    res.push(tinycolor({ h, s, l: val }).toRgb());\n    // res.push(`rgb(${v},${v},${v})`);\n    val += inc;\n  }\n\n  // start from lumin value:\n  // go down to zero\n  // while()\n\n  // go up to 1\n  return res;\n};\n\nexport {\n  colorDifference,\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchHS,\n  randomRGBA_matchSL,\n  colorCombos,\n  generateRounds,\n  grayscaleColorRange,\n  shadeColorRange,\n};\n","/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/projects/colourbrain/src/components/Button/Button.jsx",[],"/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx",["111","112","113"],"import './ColorPicker.scss';\nimport tinycolor from 'tinycolor2';\n\nimport { RgbColorPicker } from 'react-colorful';\nimport 'react-colorful/dist/index.css';\nimport Button from './../Button/Button';\nimport GridPicker from './../GridPicker/GridPicker';\n\nexport default function ColorPicker({\n  pickedColor,\n  setPickedColor,\n  handlePickColor,\n  gamemode,\n  roundColors,\n  gridColors,\n  gridColorsReverse,\n}) {\n  const {\n    targetColor,\n    color,\n    complement,\n    grayscale,\n    splitComplement,\n    triad,\n    tetrad,\n  } = roundColors;\n  const { r, g, b } = pickedColor;\n  console.log('color', color);\n\n  function renderPickerSwitch(gamemode) {\n    switch (gamemode) {\n      case 'GSLum':\n        return (\n          <div className=\"grid-picker-container\">\n            <GridPicker\n              color={pickedColor}\n              onChange={setPickedColor}\n              gridColors={gridColors}\n            />\n\n            <Button handleClick={handlePickColor} label=\"Pick\" />\n          </div>\n        );\n      case 'GSLumReverse':\n        return (\n          <div className=\"grid-picker-container\">\n            <GridPicker\n              color={pickedColor}\n              onChange={setPickedColor}\n              gridColors={gridColorsReverse}\n            />\n\n            <Button handleClick={handlePickColor} label=\"Pick\" />\n          </div>\n        );\n\n      default:\n        return (\n          <>\n            <RgbColorPicker color={pickedColor} onChange={setPickedColor} />\n\n            <Button handleClick={handlePickColor} label=\"Pick\" />\n          </>\n        );\n\n        break;\n    }\n  }\n\n  return (\n    <div\n      key={'picker'}\n      className={`color-picker gamemode-${gamemode}`}\n      style={{ backgroundColor: `rgb(${r},${g},${b})` }}\n    >\n      <div className=\"reference-colors\">\n        {gamemode === 'GSLum' && (\n          <div\n            key={grayscale}\n            className=\"grayscale-color\"\n            style={{ backgroundColor: `${grayscale}` }}\n            // style={{ backgroundColor: `${tinycolor(targetColor).toString()}` }}\n          ></div>\n        )}\n\n        {gamemode === 'GSLumReverse' && (\n          <div\n            key={grayscale}\n            className=\"grayscale-color\"\n            style={{ backgroundColor: `${color}` }}\n            // style={{ backgroundColor: `${tinycolor(targetColor).toString()}` }}\n          ></div>\n        )}\n\n        {(gamemode === 'CompHue' ||\n          gamemode === 'CompSL' ||\n          gamemode === 'CompHSL') && (\n          <div\n            key={complement}\n            className=\"complement-color\"\n            style={{ backgroundColor: `${complement}` }}\n          ></div>\n        )}\n\n        {(gamemode === 'SCompHue' ||\n          gamemode === 'SCompSL' ||\n          gamemode === 'SCompHSL') &&\n          splitComplement.map((sComp) => (\n            <div\n              key={sComp}\n              className=\"split-complement-color\"\n              style={{ backgroundColor: `${sComp}` }}\n            ></div>\n          ))}\n\n        {(gamemode === 'TriadHue' ||\n          gamemode === 'TriadSL' ||\n          gamemode === 'TriadHSL') &&\n          triad.map((triad) => (\n            <div\n              key={triad}\n              className=\"triad-color\"\n              style={{ backgroundColor: `${triad}` }}\n            ></div>\n          ))}\n        {(gamemode === 'TetradHue' ||\n          gamemode === 'TetradSL' ||\n          gamemode === 'TetradHSL') &&\n          tetrad.map((tetra) => (\n            <div\n              key={tetra}\n              className=\"tetra-color\"\n              style={{ backgroundColor: `${tetra}` }}\n            ></div>\n          ))}\n      </div>\n\n      {renderPickerSwitch(gamemode)}\n    </div>\n  );\n}\n\n// const colorCombos = (color) => {\n//   const complement = tinycolor(color).complement().toRgbString();\n//   let triad = tinycolor(color)\n//     .triad()\n//     .map((c) => c.toRgbString());\n//   let tetrad = tinycolor(color)\n//     .tetrad()\n//     .map((c) => c.toRgbString());\n\n//   //remove original colors\n//   triad.unshift();\n//   tetrad.unshift();\n//   return { complement, triad, tetrad };\n// };\n","/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx",[],"/home/adgk/projects/colourbrain/src/components/Results/Results.jsx",[],"/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx",[],"/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx",["114","115"],"/home/adgk/projects/colourbrain/src/tools/deltaE.js",[],"/home/adgk/projects/colourbrain/src/tools/scoring.js",["116"],"import { colorDifference } from './colorTools';\nimport tinycolor from 'tinycolor2';\n\nconst calculateScore = (c1, c2) => {\n\n  // params rgb objects\n  let diff = colorDifference(c1, c2); // 0 (same) - 100 (opposite)\n  let temp = 100 - diff * 2;\n  let score = temp >= 0 ? temp : 0;\n  return score;\n};\n\nconst calculateTotalScore = (results) => {\n  let total = results.reduce((acc, round) => {\n    let score = calculateScore(round.picked, round.target);\n    return score + acc;\n  }, 0);\n\n  return Math.ceil(total / results.length);\n};\n\nexport { calculateScore, calculateTotalScore };\n","/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js",[],"/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js",[],"/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx",[],"/home/adgk/projects/colourbrain/src/components/Home/Home.jsx",[],"/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx",[],"/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx",[],"/home/adgk/projects/colourbrain/src/components/GridPicker/GridPicker.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":2,"column":20,"nodeType":"123","messageId":"124","endLine":2,"endColumn":29},{"ruleId":"121","severity":1,"message":"125","line":24,"column":10,"nodeType":"123","messageId":"124","endLine":24,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":118,"column":6,"nodeType":"128","endLine":118,"endColumn":13,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"130","line":126,"column":6,"nodeType":"128","endLine":126,"endColumn":16,"suggestions":"131"},{"ruleId":"121","severity":1,"message":"132","line":22,"column":7,"nodeType":"123","messageId":"124","endLine":22,"endColumn":21},{"ruleId":"121","severity":1,"message":"133","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":17},{"ruleId":"121","severity":1,"message":"134","line":19,"column":5,"nodeType":"123","messageId":"124","endLine":19,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":66,"column":9,"nodeType":"137","messageId":"138","endLine":66,"endColumn":15},{"ruleId":"121","severity":1,"message":"139","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"140","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":14},{"ruleId":"121","severity":1,"message":"133","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":17},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gamemode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["143"],"React Hook useEffect has missing dependencies: 'gameActive' and 'handleRestartGame'. Either include them or remove the dependency array.",["144"],"'randomRGBAGray' is assigned a value but never used.","'tinycolor' is defined but never used.","'targetColor' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'useState' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [gameActive, gamemode, preview, round, roundColors]",{"range":"149","text":"150"},"Update the dependencies array to be: [gameActive, gamemode, handleRestartGame]",{"range":"151","text":"152"},[3746,3753],"[gameActive, gamemode, preview, round, roundColors]",[3886,3896],"[gameActive, gamemode, handleRestartGame]"]