[{"/home/adgk/testing/react/test1/src/index.js":"1","/home/adgk/testing/react/test1/src/reportWebVitals.js":"2","/home/adgk/testing/react/test1/src/App.js":"3","/home/adgk/testing/react/test1/src/components/Main/Main.jsx":"4","/home/adgk/testing/react/test1/src/components/Game/Game.jsx":"5","/home/adgk/testing/react/test1/src/components/ColorPicker/ColorPicker.jsx":"6","/home/adgk/testing/react/test1/src/components/RoundColor/RoundColor.jsx":"7","/home/adgk/testing/react/test1/src/components/Button/Button.jsx":"8","/home/adgk/testing/react/test1/src/components/Results/Results.jsx":"9","/home/adgk/testing/react/test1/src/tools/deltaE.js":"10","/home/adgk/testing/react/test1/src/components/CompareColors/CompareColors.jsx":"11","/home/adgk/testing/react/test1/src/tools/rgb2hsl.js":"12","/home/adgk/testing/react/test1/src/components/Checkbox/Checkbox.js":"13","/home/adgk/testing/react/test1/src/tools/colorTools.js":"14","/home/adgk/testing/react/test1/src/components/NewGameButtons/NewGameButtons.jsx":"15","/home/adgk/testing/react/test1/src/components/Highscores/Highscores.jsx":"16","/home/adgk/testing/react/test1/src/tools/scoring.js":"17","/home/adgk/testing/react/test1/src/tools/gameModeMaps.js":"18","/home/adgk/testing/react/test1/src/components/AnimatedCounter/AnimatedCounter.jsx":"19","/home/adgk/testing/react/test1/src/components/Nav/Nav.jsx":"20","/home/adgk/testing/react/test1/src/components/FAQ/FAQ.jsx":"21","/home/adgk/testing/react/test1/src/components/About/About.jsx":"22"},{"size":500,"mtime":1610900279476,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1610900279497,"results":"25","hashOfConfig":"24"},{"size":944,"mtime":1611146806190,"results":"26","hashOfConfig":"24"},{"size":268,"mtime":1611145657766,"results":"27","hashOfConfig":"24"},{"size":7969,"mtime":1611141387369,"results":"28","hashOfConfig":"24"},{"size":2463,"mtime":1611141551923,"results":"29","hashOfConfig":"24"},{"size":258,"mtime":1610993652521,"results":"30","hashOfConfig":"24"},{"size":302,"mtime":1611054860104,"results":"31","hashOfConfig":"24"},{"size":4781,"mtime":1611096021732,"results":"32","hashOfConfig":"24"},{"size":1531,"mtime":1610913524693,"results":"33","hashOfConfig":"24"},{"size":1468,"mtime":1611095981296,"results":"34","hashOfConfig":"24"},{"size":2081,"mtime":1610969389990,"results":"35","hashOfConfig":"24"},{"size":285,"mtime":1611011721284,"results":"36","hashOfConfig":"24"},{"size":2560,"mtime":1611096836344,"results":"37","hashOfConfig":"24"},{"size":2649,"mtime":1611095190371,"results":"38","hashOfConfig":"24"},{"size":712,"mtime":1611097034506,"results":"39","hashOfConfig":"24"},{"size":543,"mtime":1611062351266,"results":"40","hashOfConfig":"24"},{"size":762,"mtime":1611095190217,"results":"41","hashOfConfig":"24"},{"size":655,"mtime":1611096594953,"results":"42","hashOfConfig":"24"},{"size":647,"mtime":1611149581131,"results":"43","hashOfConfig":"24"},{"size":135,"mtime":1611146502847,"results":"44","hashOfConfig":"24"},{"size":140,"mtime":1611145942806,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"uvxg06",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/adgk/testing/react/test1/src/index.js",[],["95","96"],"/home/adgk/testing/react/test1/src/reportWebVitals.js",[],"/home/adgk/testing/react/test1/src/App.js",["97","98"],"/home/adgk/testing/react/test1/src/components/Main/Main.jsx",["99","100","101","102"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Game from '../Game/Game';\nimport './Main.scss';\n\nexport default function Main() {\n  return (\n    <div className=\"main\">\n      <Game />\n    </div>\n  );\n}\n","/home/adgk/testing/react/test1/src/components/Game/Game.jsx",["103"],"import React, { useEffect, useState, useRef } from 'react';\nimport tinycolor from 'tinycolor2';\nimport {\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchSL,\n  generateRounds,\n} from './../../tools/colorTools';\nimport './Game.scss';\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport RoundColor from '../RoundColor/RoundColor';\nimport Button from '../Button/Button';\n// import Checkbox from './../Checkbox/Checkbox';\nimport Results from '../Results/Results';\nimport CompareColors from '../CompareColors/CompareColors';\nimport NewGameButtons from '../NewGameButtons/NewGameButtons';\nimport Highscores from '../Highscores/Highscores';\n\n//must have minimum 2 rounds\n// make these a user adjustable settings option on homepage\nconst totalRounds = 2;\nconst flashTime = 1200;\n\nexport default function Game() {\n  const [roundColors, setRoundColors] = useState(generateRounds(totalRounds));\n  const [roundColorNames, setRoundColorNames] = useState([]);\n  const [results, setResults] = useState([]);\n  const [pickedColor, setPickedColor] = useState(randomRGBA([20, 235]));\n  const [round, setRound] = useState(totalRounds); // round number reset at start game (this is not set to 1 to ensure useeffect is triggered)\n  // stages: new, preview, pick, compare, results\n  const [roundStage, setRoundStage] = useState('new');\n  // game modes: Hue, SatLum, HSL\n  const [gamemode, setgamemode] = useState('Hue');\n  const [preview, setPreview] = useState(true);\n  const [userPreferencePreview, setuserPreferencePreview] = useState(false);\n  const [gameActive, setGameActive] = useState(false);\n  const [highscores, setHighscores] = useState({\n    Hue: 0,\n    SatLum: 0,\n    HSL: 0,\n    CompHue: 0,\n    CompSL: 0,\n    CompHSL: 0,\n    SCompHue: 0,\n    SCompSL: 0,\n    SCompHSL: 0,\n    TriadHue: 0,\n    TriadSL: 0,\n    TriadHSL: 0,\n    TetradHue: 0,\n    TetradSL: 0,\n    TetradHSL: 0,\n  });\n  const timer = useRef();\n  const isLoaded = useRef(false);\n\n  // Update player colour options when moving to next round (i.e. lock in Hue or Sat/Lum dpending on game mode)\n  useEffect(() => {\n    if (gameActive) {\n      const targetColor = roundColors[round - 1].targetColor;\n      switch (gamemode) {\n        case 'Hue':\n        case 'CompHue':\n        case 'SCompHue':\n        case 'TriadHue':\n        case 'TetradHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n\n          break;\n        case 'SatLum':\n        case 'SCompSL':\n        case 'CompSL':\n        case 'TriadSL':\n        case 'TetradSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        // All HSL options get a random colour\n        default:\n          setPickedColor(randomRGBA([20, 235]));\n      }\n      if (preview) {\n        setRoundStage('preview');\n        timer.current = setTimeout(() => {\n          setRoundStage('pick');\n        }, flashTime);\n        return () => clearTimeout(timer.current);\n      } else {\n        setRoundStage('pick');\n      }\n    }\n  }, [round]);\n\n  // Get highscores from local storage\n  useEffect(() => {\n    const data = localStorage.getItem('highscores');\n    if (data) {\n      setHighscores(JSON.parse(data));\n    }\n    return () => {};\n  }, []);\n\n  // Set highscores to local storage\n  useEffect(() => {\n    localStorage.setItem('highscores', JSON.stringify(highscores));\n    return () => {};\n  }, [highscores]);\n\n  // Fetch colour names from API\n  useEffect(() => {\n    if (!isLoaded.current) {\n      isLoaded.current = true;\n      return;\n    }\n    let hexTargets = roundColors.map((round) =>\n      tinycolor.fromRatio(round.targetColor).toHexString()\n    );\n    let requestString = hexTargets.map((t) => t.slice(1)).join(',');\n    // https://github.com/meodai/color-names\n    fetch(`https://api.color.pizza/v1/${requestString}`, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        // console.log('colors', response.colors);\n        let names = response.colors.map((n) => n.name);\n        setRoundColorNames(names);\n      })\n      .catch((error) => console.log(error));\n  }, [roundColors]);\n\n  // Event handlers\n  const handlePickColor = (e) => {\n    const targetColor = roundColors[round - 1].targetColor;\n\n    setResults([...results, { picked: pickedColor, target: targetColor }]);\n    setRoundStage('compare');\n  };\n\n  const handleNextRound = (e) => {\n    console.log('round: ', round);\n    setRoundStage('preview');\n    setRound(round + 1);\n  };\n\n  const handleShowResults = (e) => {\n    setRoundStage('results');\n    // console.log(results);\n  };\n\n  const handleRestartGame = (e) => {\n    console.log('restarting...');\n    setGameActive(true);\n    setRoundColors(generateRounds(totalRounds));\n    setRound(1);\n    setResults([]);\n  };\n\n  const handleBackToStart = (e) => {\n    setGameActive(false);\n    // clearTimeout(timer.current);\n    setRoundStage('new');\n    setRound(totalRounds);\n  };\n\n  const handleSelectMode = (e) => {\n    let mode = e.target.dataset.gamemode;\n    console.log(mode);\n    setgamemode(mode);\n\n    if (\n      userPreferencePreview ||\n      mode === 'Hue' ||\n      mode === 'SatLum' ||\n      mode === 'HSL'\n    ) {\n      setPreview(true);\n    } else {\n      setPreview(false);\n    }\n    handleRestartGame();\n  };\n\n  const handleToggleUserPrefPreview = (e) => {\n    setuserPreferencePreview(!userPreferencePreview);\n  };\n\n  const handleUpdateHighscores = (score) => {\n    // don't update highscore if using a preview (unless a memory gamemode)\n    if (\n      preview &&\n      !(gamemode === 'Hue' || gamemode === 'SatLum' || gamemode === 'HSL')\n    ) {\n      return;\n    }\n\n    if (score > highscores[gamemode]) {\n      setHighscores((prevState) => ({\n        ...prevState,\n        [gamemode]: score,\n      }));\n    }\n  };\n\n\n  return (\n    <div className=\"game-container\">\n      {roundStage !== 'new' &&\n        roundStage !== 'preview' &&\n        roundStage !== 'results' && (\n          <div className=\"back-button-container\">\n            <Button label=\"Back\" handleClick={handleBackToStart} />\n          </div>\n        )}\n      {roundStage === 'new' && (\n        <div className=\"new-game\">\n          <NewGameButtons\n            handleSelectMode={handleSelectMode}\n            handleToggleUserPrefPreview={handleToggleUserPrefPreview}\n            userPreferencePreview={userPreferencePreview}\n          />\n\n          <div>\n            <p>Match the colour shown at the start of each round.</p>\n            <p>Use the Complementary/Triad/Tetrad colours as guides</p>\n            <p>\n              * Lets you preview the target colour. Score don't contribute to\n              highscores. Doesn't apply to memory games.\n            </p>\n          </div>\n          <Highscores highscores={highscores} />\n        </div>\n      )}\n      {roundStage === 'preview' && (\n        <RoundColor color={roundColors[round - 1].targetColor} />\n      )}\n      {roundStage === 'pick' && (\n        <>\n          <ColorPicker\n            pickedColor={pickedColor}\n            setPickedColor={setPickedColor}\n            handlePickColor={handlePickColor}\n            gamemode={gamemode}\n            roundColors={roundColors[round - 1]}          >\n            <h1>Round {round}</h1>\n          </ColorPicker>\n        </>\n      )}\n\n      {roundStage === 'compare' && (\n        <CompareColors\n          round={round}\n          roundColors={roundColors}\n          totalRounds={totalRounds}\n          targetColor={roundColors[round - 1].targetColor}\n          pickedColor={pickedColor}\n          handleNextRound={handleNextRound}\n          handleShowResults={handleShowResults}\n        />\n      )}\n\n      {roundStage === 'results' && (\n        <Results\n          results={results}\n          gamemode={gamemode}\n          roundColorNames={roundColorNames}\n          roundColors={roundColors}\n          handleRestartGame={handleRestartGame}\n          handleBackToStart={handleBackToStart}\n          handleUpdateHighscores={handleUpdateHighscores}\n        />\n      )}\n    </div>\n  );\n}\n","/home/adgk/testing/react/test1/src/components/ColorPicker/ColorPicker.jsx",[],"/home/adgk/testing/react/test1/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/testing/react/test1/src/components/Button/Button.jsx",[],"/home/adgk/testing/react/test1/src/components/Results/Results.jsx",[],"/home/adgk/testing/react/test1/src/tools/deltaE.js",[],"/home/adgk/testing/react/test1/src/components/CompareColors/CompareColors.jsx",[],"/home/adgk/testing/react/test1/src/tools/rgb2hsl.js",["104","105","106"],"/// https://gist.github.com/emanuel-sanabria-developer/5793377#file-rgbtohsl-js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r, g, b) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, l];\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h, s, l) => {\n  var r, g, b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n};\n\nexport { rgbToHsl, hslToRgb };\n",["107","108"],"/home/adgk/testing/react/test1/src/components/Checkbox/Checkbox.js",[],"/home/adgk/testing/react/test1/src/tools/colorTools.js",[],"/home/adgk/testing/react/test1/src/components/NewGameButtons/NewGameButtons.jsx",[],"/home/adgk/testing/react/test1/src/components/Highscores/Highscores.jsx",[],"/home/adgk/testing/react/test1/src/tools/scoring.js",[],"/home/adgk/testing/react/test1/src/tools/gameModeMaps.js",[],"/home/adgk/testing/react/test1/src/components/AnimatedCounter/AnimatedCounter.jsx",[],"/home/adgk/testing/react/test1/src/components/Nav/Nav.jsx",[],"/home/adgk/testing/react/test1/src/components/FAQ/FAQ.jsx",[],"/home/adgk/testing/react/test1/src/components/About/About.jsx",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":50,"nodeType":"115","messageId":"116","endLine":2,"endColumn":54},{"ruleId":"113","severity":1,"message":"117","line":3,"column":8,"nodeType":"115","messageId":"116","endLine":3,"endColumn":12},{"ruleId":"113","severity":1,"message":"118","line":2,"column":27,"nodeType":"115","messageId":"116","endLine":2,"endColumn":33},{"ruleId":"113","severity":1,"message":"119","line":2,"column":35,"nodeType":"115","messageId":"116","endLine":2,"endColumn":41},{"ruleId":"113","severity":1,"message":"120","line":2,"column":43,"nodeType":"115","messageId":"116","endLine":2,"endColumn":48},{"ruleId":"113","severity":1,"message":"114","line":2,"column":50,"nodeType":"115","messageId":"116","endLine":2,"endColumn":54},{"ruleId":"121","severity":1,"message":"122","line":91,"column":6,"nodeType":"123","endLine":91,"endColumn":13,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":24,"column":11,"nodeType":"127","messageId":"128","endLine":24,"endColumn":13},{"ruleId":"129","severity":1,"message":"130","line":29,"column":5,"nodeType":"131","messageId":"132","endLine":39,"endColumn":6},{"ruleId":"125","severity":1,"message":"126","line":60,"column":9,"nodeType":"127","messageId":"128","endLine":60,"endColumn":11},{"ruleId":"109","replacedBy":"133"},{"ruleId":"111","replacedBy":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Main' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gamemode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["137"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["135"],["136"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},"Update the dependencies array to be: [gameActive, gamemode, preview, round, roundColors]",{"range":"140","text":"141"},[2969,2976],"[gameActive, gamemode, preview, round, roundColors]"]