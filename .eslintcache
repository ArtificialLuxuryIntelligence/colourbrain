[{"/home/adgk/projects/colourbrain/src/index.js":"1","/home/adgk/projects/colourbrain/src/reportWebVitals.js":"2","/home/adgk/projects/colourbrain/src/App.js":"3","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx":"4","/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx":"5","/home/adgk/projects/colourbrain/src/components/About/About.jsx":"6","/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx":"7","/home/adgk/projects/colourbrain/src/tools/colorTools.js":"8","/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx":"9","/home/adgk/projects/colourbrain/src/components/Button/Button.jsx":"10","/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx":"11","/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx":"12","/home/adgk/projects/colourbrain/src/components/Results/Results.jsx":"13","/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx":"14","/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx":"15","/home/adgk/projects/colourbrain/src/tools/deltaE.js":"16","/home/adgk/projects/colourbrain/src/tools/scoring.js":"17","/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js":"18","/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js":"19","/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx":"20","/home/adgk/projects/colourbrain/src/components/Home/Home.jsx":"21","/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx":"22","/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx":"23","/home/adgk/projects/colourbrain/src/components/GridPicker/GridPicker.js":"24"},{"size":525,"mtime":1611250416336,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1610900279497,"results":"27","hashOfConfig":"26"},{"size":2773,"mtime":1611270901923,"results":"28","hashOfConfig":"26"},{"size":11171,"mtime":1611326469523,"results":"29","hashOfConfig":"26"},{"size":135,"mtime":1611157591230,"results":"30","hashOfConfig":"26"},{"size":140,"mtime":1611157591226,"results":"31","hashOfConfig":"26"},{"size":1063,"mtime":1611271757306,"results":"32","hashOfConfig":"26"},{"size":4071,"mtime":1611324284595,"results":"33","hashOfConfig":"26"},{"size":258,"mtime":1610993652521,"results":"34","hashOfConfig":"26"},{"size":370,"mtime":1611260690675,"results":"35","hashOfConfig":"26"},{"size":4093,"mtime":1611324484199,"results":"36","hashOfConfig":"26"},{"size":1462,"mtime":1611319299876,"results":"37","hashOfConfig":"26"},{"size":4908,"mtime":1611319306479,"results":"38","hashOfConfig":"26"},{"size":694,"mtime":1611240981582,"results":"39","hashOfConfig":"26"},{"size":9024,"mtime":1611326559288,"results":"40","hashOfConfig":"26"},{"size":1531,"mtime":1610913524693,"results":"41","hashOfConfig":"26"},{"size":579,"mtime":1611324307832,"results":"42","hashOfConfig":"26"},{"size":958,"mtime":1611326458678,"results":"43","hashOfConfig":"26"},{"size":285,"mtime":1611011721284,"results":"44","hashOfConfig":"26"},{"size":655,"mtime":1611096594953,"results":"45","hashOfConfig":"26"},{"size":177,"mtime":1611157591236,"results":"46","hashOfConfig":"26"},{"size":400,"mtime":1611159140112,"results":"47","hashOfConfig":"26"},{"size":1339,"mtime":1611270507514,"results":"48","hashOfConfig":"26"},{"size":637,"mtime":1611325295869,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1kjysou",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/home/adgk/projects/colourbrain/src/index.js",[],["103","104"],"/home/adgk/projects/colourbrain/src/reportWebVitals.js",[],"/home/adgk/projects/colourbrain/src/App.js",["105"],"import './App.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport Home from './components/Home/Home';\nimport Game from './components/Game/Game';\nimport FAQ from './components/FAQ/FAQ';\nimport About from './components/About/About';\n\nimport Nav from './components/Nav/Nav';\n\nimport useOutsideClick from './components/Hooks/useOutsideClick.jsx';\n\nfunction App() {\n  const [navActive, setNavActive] = useState(false);\n\n  const navRef = useRef();\n\n  useOutsideClick(navRef, () => {\n    if (navActive) {\n      setNavActive(false);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <header className={navActive ? 'header header-nav-active' : ' header '}>\n          <Link to=\"/\">\n            <h1>Colour Brain</h1>\n          </Link>\n\n          <div ref={navRef}>\n            <Nav navActive={navActive} setNavActive={setNavActive} />\n          </div>\n        </header>\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <main>\n          <AnimatePresence exitBeforeEnter>\n            <Switch key={'switch'}>\n              <Route key=\"faq\" path=\"/FAQ\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <FAQ />\n                </motion.div>\n              </Route>\n              <Route key=\"about\" path=\"/about\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <About />\n                </motion.div>\n              </Route>\n              <Route key=\"game\" path=\"/play\">\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <Game />\n                </motion.div>\n              </Route>\n\n              <Route key=\"home\" path=\"/\" exact>\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.7 }}\n                >\n                  <Home />\n                </motion.div>\n              </Route>\n            </Switch>\n          </AnimatePresence>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/adgk/projects/colourbrain/src/components/Game/Game.jsx",["106","107","108"],"/home/adgk/projects/colourbrain/src/components/FAQ/FAQ.jsx",[],"/home/adgk/projects/colourbrain/src/components/About/About.jsx",[],"/home/adgk/projects/colourbrain/src/components/Nav/Nav.jsx",[],"/home/adgk/projects/colourbrain/src/tools/colorTools.js",["109"],"import deltaE from './deltaE';\nimport tinycolor from 'tinycolor2';\n\nconst colorDifference = (c1, c2) => {\n  // params rgb objects\n  const { r, g, b } = c1;\n  const { r: rp, g: gp, b: bp } = c2;\n  let delta = deltaE([r, g, b], [rp, gp, bp]);\n  return delta;\n};\n\n// separate into own files?\nconst randomRGBA = (range = [0, 255], a = 1) => {\n  return {\n    r: randomInRange(range),\n    g: randomInRange(range),\n    b: randomInRange(range),\n    a,\n  };\n};\n\nconst randomRGBAGray = (range = [0, 255], a = 1) => {\n  let val = randomInRange(range);\n  return {\n    r: val,\n    g: val,\n    b: val,\n    a,\n  };\n};\n\n// returns random rgba object with same saturation and luminosity as input color (different hue)\nconst randomRGBA_matchSL = (color) => {\n  let hsl = tinycolor.fromRatio(color).toHsl();\n  let hue = Math.random();\n  hsl.h = hue;\n  let rgb = tinycolor(hsl).toRgb();\n  return rgb;\n};\n\n// returns random rgba object with different saturation and luminosity as input color (same hue)\nconst randomRGBA_matchH = (color) => {\n  let hsl = tinycolor.fromRatio(color).toHsl();\n  let sat = Math.random();\n  let lum = Math.random();\n  hsl.s = sat;\n  hsl.l = lum;\n  let rgb = tinycolor(hsl).toRgb();\n  return rgb;\n};\n\nconst randomRGBA_matchHS = (color) => {\n  let hsl = tinycolor.fromRatio(color).toHsl();\n  // let lum = Math.random();\n  // hsl.l = lum;\n\n  let lum = Math.random();\n  hsl.l = lum;\n\n  let rgb = tinycolor(hsl).toRgb();\n  return rgb;\n};\n\nconst colorCombos = (color) => {\n  const complement = tinycolor(color).complement().toRgbString();\n\n  //Thetinycolor built in method rotates the hue by too much in my opinion (normal is 150 and 210 degs from base colour)\n  // let splitComplement = tinycolor(color)\n  //   .splitcomplement()\n  //   .map((c) => c.toRgbString());\n\n  // console.log('SCOMP', splitComplement, color);\n\n  let grayscale = tinycolor(color).greyscale().toRgbString();\n\n  let splitComplement = splitComp(color);\n\n  let triad = tinycolor(color)\n    .triad()\n    .map((c) => c.toRgbString());\n  let tetrad = tinycolor(color)\n    .tetrad()\n    .map((c) => c.toRgbString());\n\n  //remove original colors\n  triad.shift();\n  tetrad.shift();\n  return {\n    target: tinycolor(color).toRgbString(),\n    grayscale,\n    complement,\n    splitComplement,\n    triad,\n    tetrad,\n  };\n};\n\n// --- util\nconst randomInRange = (range = [0, 1]) => {\n  let [min, max] = range;\n  return Math.random() * (max - min) + min;\n};\n\nconst splitComp = (color) => {\n  return [\n    tinycolor(color).spin(150).toRgbString(),\n    tinycolor(color).spin(210).toRgbString(),\n  ];\n};\n\nconst generateRounds = (rounds, grayScale = false) => {\n  let res = [];\n  let r = 0;\n  while (r < rounds) {\n    let targetColor;\n\n    targetColor = randomRGBA([25, 230]);\n\n    const {\n      grayscale,\n      complement,\n      splitComplement,\n      triad,\n      tetrad,\n    } = colorCombos(targetColor);\n\n    res.push({\n      targetColor: grayScale ? tinycolor(grayscale).toRgb() : targetColor,\n      color: tinycolor(targetColor).toString(),\n      grayscale,\n      complement,\n      splitComplement,\n      triad,\n      tetrad,\n    });\n    r++;\n  }\n  return res;\n};\n\n// make an array from white to black\nconst grayscaleColorRange = (n) => {\n  let res = [];\n  let inc = 255 / (n + 1);\n  let v = 0;\n  for (let i = 0; i < n; i++) {\n    res.push({ r: v, g: v, b: v });\n    // res.push(`rgb(${v},${v},${v})`);\n    v += inc;\n  }\n  return res;\n};\n\n// makes array of single colour in all shades (n divisions)\nconst shadeColorRange = (n, color) => {\n  let res = [];\n  let hsl = tinycolor(color).toHsl();\n  let { h, s, l } = hsl;\n  let inc = 1 / (n + 1);\n  // let val = 0;\n  let val = l % inc;\n  for (let i = 0; i < n; i++) {\n    res.push(tinycolor({ h, s, l: val }).toRgb());\n    // res.push(`rgb(${v},${v},${v})`);\n    val += inc;\n  }\n\n  // start from lumin value:\n  // go down to zero\n  // while()\n\n  // go up to 1\n  return res;\n};\n\nexport {\n  colorDifference,\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchHS,\n  randomRGBA_matchSL,\n  colorCombos,\n  generateRounds,\n  grayscaleColorRange,\n  shadeColorRange,\n};\n","/home/adgk/projects/colourbrain/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/projects/colourbrain/src/components/Button/Button.jsx",[],"/home/adgk/projects/colourbrain/src/components/ColorPicker/ColorPicker.jsx",["110","111","112"],"import './ColorPicker.scss';\nimport tinycolor from 'tinycolor2';\n\nimport { RgbColorPicker } from 'react-colorful';\nimport 'react-colorful/dist/index.css';\nimport Button from './../Button/Button';\nimport GridPicker from './../GridPicker/GridPicker';\n\nexport default function ColorPicker({\n  pickedColor,\n  setPickedColor,\n  handlePickColor,\n  gamemode,\n  roundColors,\n  gridColors,\n  gridColorsReverse,\n}) {\n  const {\n    targetColor,\n    color,\n    complement,\n    grayscale,\n    splitComplement,\n    triad,\n    tetrad,\n  } = roundColors;\n  const { r, g, b } = pickedColor;\n  console.log('color', color);\n\n  function renderPickerSwitch(gamemode) {\n    switch (gamemode) {\n      case 'GSLum':\n        return (\n          <div className=\"grid-picker-container\">\n            <GridPicker\n              color={pickedColor}\n              onChange={setPickedColor}\n              gridColors={gridColors}\n            />\n\n            <Button handleClick={handlePickColor} label=\"Pick\" />\n          </div>\n        );\n      case 'GSLumReverse':\n        return (\n          <div className=\"grid-picker-container\">\n            <GridPicker\n              color={pickedColor}\n              onChange={setPickedColor}\n              gridColors={gridColorsReverse}\n            />\n\n            <Button handleClick={handlePickColor} label=\"Pick\" />\n          </div>\n        );\n\n      default:\n        return (\n          <>\n            <RgbColorPicker color={pickedColor} onChange={setPickedColor} />\n\n            <Button handleClick={handlePickColor} label=\"Pick\" />\n          </>\n        );\n\n        break;\n    }\n  }\n\n  return (\n    <div\n      key={'picker'}\n      className={`color-picker gamemode-${gamemode}`}\n      style={{ backgroundColor: `rgb(${r},${g},${b})` }}\n    >\n      <div className=\"reference-colors\">\n        {gamemode === 'GSLum' && (\n          <div\n            key={grayscale}\n            className=\"grayscale-color\"\n            style={{ backgroundColor: `${grayscale}` }}\n            // style={{ backgroundColor: `${tinycolor(targetColor).toString()}` }}\n          ></div>\n        )}\n\n        {gamemode === 'GSLumReverse' && (\n          <div\n            key={grayscale}\n            className=\"grayscale-color\"\n            style={{ backgroundColor: `${color}` }}\n            // style={{ backgroundColor: `${tinycolor(targetColor).toString()}` }}\n          ></div>\n        )}\n\n        {(gamemode === 'CompHue' ||\n          gamemode === 'CompSL' ||\n          gamemode === 'CompHSL') && (\n          <div\n            key={complement}\n            className=\"complement-color\"\n            style={{ backgroundColor: `${complement}` }}\n          ></div>\n        )}\n\n        {(gamemode === 'SCompHue' ||\n          gamemode === 'SCompSL' ||\n          gamemode === 'SCompHSL') &&\n          splitComplement.map((sComp) => (\n            <div\n              key={sComp}\n              className=\"split-complement-color\"\n              style={{ backgroundColor: `${sComp}` }}\n            ></div>\n          ))}\n\n        {(gamemode === 'TriadHue' ||\n          gamemode === 'TriadSL' ||\n          gamemode === 'TriadHSL') &&\n          triad.map((triad) => (\n            <div\n              key={triad}\n              className=\"triad-color\"\n              style={{ backgroundColor: `${triad}` }}\n            ></div>\n          ))}\n        {(gamemode === 'TetradHue' ||\n          gamemode === 'TetradSL' ||\n          gamemode === 'TetradHSL') &&\n          tetrad.map((tetra) => (\n            <div\n              key={tetra}\n              className=\"tetra-color\"\n              style={{ backgroundColor: `${tetra}` }}\n            ></div>\n          ))}\n      </div>\n\n      {renderPickerSwitch(gamemode)}\n    </div>\n  );\n}\n\n// const colorCombos = (color) => {\n//   const complement = tinycolor(color).complement().toRgbString();\n//   let triad = tinycolor(color)\n//     .triad()\n//     .map((c) => c.toRgbString());\n//   let tetrad = tinycolor(color)\n//     .tetrad()\n//     .map((c) => c.toRgbString());\n\n//   //remove original colors\n//   triad.unshift();\n//   tetrad.unshift();\n//   return { complement, triad, tetrad };\n// };\n","/home/adgk/projects/colourbrain/src/components/CompareColors/CompareColors.jsx",[],"/home/adgk/projects/colourbrain/src/components/Results/Results.jsx",[],"/home/adgk/projects/colourbrain/src/components/Highscores/Highscores.jsx",[],"/home/adgk/projects/colourbrain/src/components/NewGameButtons/NewGameButtons.jsx",["113","114"],"/home/adgk/projects/colourbrain/src/tools/deltaE.js",[],"/home/adgk/projects/colourbrain/src/tools/scoring.js",["115"],"import { colorDifference } from './colorTools';\nimport tinycolor from 'tinycolor2';\n\nconst calculateScore = (c1, c2) => {\n\n  // params rgb objects\n  let diff = colorDifference(c1, c2); // 0 (same) - 100 (opposite)\n  let temp = 100 - diff * 2;\n  let score = temp >= 0 ? temp : 0;\n  return score;\n};\n\nconst calculateTotalScore = (results) => {\n  let total = results.reduce((acc, round) => {\n    let score = calculateScore(round.picked, round.target);\n    return score + acc;\n  }, 0);\n\n  return Math.ceil(total / results.length);\n};\n\nexport { calculateScore, calculateTotalScore };\n","/home/adgk/projects/colourbrain/src/tools/gameModeMaps.js",[],"/home/adgk/projects/colourbrain/src/components/Checkbox/Checkbox.js",[],"/home/adgk/projects/colourbrain/src/components/AnimatedCounter/AnimatedCounter.jsx",[],"/home/adgk/projects/colourbrain/src/components/Home/Home.jsx",[],"/home/adgk/projects/colourbrain/src/components/Hooks/useOutsideClick.jsx",[],"/home/adgk/projects/colourbrain/src/components/SVGButton/SVGButton.jsx",[],"/home/adgk/projects/colourbrain/src/components/GridPicker/GridPicker.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":20,"nodeType":"122","messageId":"123","endLine":2,"endColumn":29},{"ruleId":"120","severity":1,"message":"124","line":24,"column":10,"nodeType":"122","messageId":"123","endLine":24,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":118,"column":6,"nodeType":"127","endLine":118,"endColumn":13,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"129","line":126,"column":6,"nodeType":"127","endLine":126,"endColumn":16,"suggestions":"130"},{"ruleId":"120","severity":1,"message":"131","line":22,"column":7,"nodeType":"122","messageId":"123","endLine":22,"endColumn":21},{"ruleId":"120","severity":1,"message":"132","line":2,"column":8,"nodeType":"122","messageId":"123","endLine":2,"endColumn":17},{"ruleId":"120","severity":1,"message":"133","line":19,"column":5,"nodeType":"122","messageId":"123","endLine":19,"endColumn":16},{"ruleId":"134","severity":1,"message":"135","line":66,"column":9,"nodeType":"136","messageId":"137","endLine":66,"endColumn":15},{"ruleId":"120","severity":1,"message":"138","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"139","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":14},{"ruleId":"120","severity":1,"message":"132","line":2,"column":8,"nodeType":"122","messageId":"123","endLine":2,"endColumn":17},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gamemode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["142"],"React Hook useEffect has missing dependencies: 'gameActive' and 'handleRestartGame'. Either include them or remove the dependency array.",["143"],"'randomRGBAGray' is assigned a value but never used.","'tinycolor' is defined but never used.","'targetColor' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'useState' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"Update the dependencies array to be: [gameActive, gamemode, preview, round, roundColors]",{"range":"148","text":"149"},"Update the dependencies array to be: [gameActive, gamemode, handleRestartGame]",{"range":"150","text":"151"},[3746,3753],"[gameActive, gamemode, preview, round, roundColors]",[3886,3896],"[gameActive, gamemode, handleRestartGame]"]