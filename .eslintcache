[{"/home/adgk/testing/react/test1/src/index.js":"1","/home/adgk/testing/react/test1/src/reportWebVitals.js":"2","/home/adgk/testing/react/test1/src/App.js":"3","/home/adgk/testing/react/test1/src/components/Main/Main.jsx":"4","/home/adgk/testing/react/test1/src/components/Game/Game.jsx":"5","/home/adgk/testing/react/test1/src/components/ColorPicker/ColorPicker.jsx":"6","/home/adgk/testing/react/test1/src/components/RoundColor/RoundColor.jsx":"7","/home/adgk/testing/react/test1/src/components/Button/Button.jsx":"8","/home/adgk/testing/react/test1/src/components/Results/Results.jsx":"9","/home/adgk/testing/react/test1/src/tools/deltaE.js":"10","/home/adgk/testing/react/test1/src/components/CompareColors/CompareColors.jsx":"11","/home/adgk/testing/react/test1/src/tools/rgb2hsl.js":"12","/home/adgk/testing/react/test1/src/components/Checkbox/Checkbox.js":"13","/home/adgk/testing/react/test1/src/tools/colorTools.js":"14","/home/adgk/testing/react/test1/src/components/NewGameButtons/NewGameButtons.jsx":"15","/home/adgk/testing/react/test1/src/components/Highscores/Highscores.jsx":"16","/home/adgk/testing/react/test1/src/tools/scoring.js":"17"},{"size":500,"mtime":1610900279476,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1610900279497,"results":"20","hashOfConfig":"19"},{"size":233,"mtime":1610978139477,"results":"21","hashOfConfig":"19"},{"size":148,"mtime":1610904430842,"results":"22","hashOfConfig":"19"},{"size":8996,"mtime":1611068285712,"results":"23","hashOfConfig":"19"},{"size":2127,"mtime":1611012112773,"results":"24","hashOfConfig":"19"},{"size":258,"mtime":1610993652521,"results":"25","hashOfConfig":"19"},{"size":302,"mtime":1611054860104,"results":"26","hashOfConfig":"19"},{"size":4046,"mtime":1611062101268,"results":"27","hashOfConfig":"19"},{"size":1531,"mtime":1610913524693,"results":"28","hashOfConfig":"19"},{"size":1148,"mtime":1611062537649,"results":"29","hashOfConfig":"19"},{"size":2081,"mtime":1610969389990,"results":"30","hashOfConfig":"19"},{"size":285,"mtime":1611011721284,"results":"31","hashOfConfig":"19"},{"size":1654,"mtime":1611062367451,"results":"32","hashOfConfig":"19"},{"size":2221,"mtime":1611066517899,"results":"33","hashOfConfig":"19"},{"size":499,"mtime":1611061993831,"results":"34","hashOfConfig":"19"},{"size":543,"mtime":1611062351266,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"uvxg06",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/adgk/testing/react/test1/src/index.js",[],["75","76"],"/home/adgk/testing/react/test1/src/reportWebVitals.js",[],"/home/adgk/testing/react/test1/src/App.js",[],"/home/adgk/testing/react/test1/src/components/Main/Main.jsx",[],"/home/adgk/testing/react/test1/src/components/Game/Game.jsx",["77","78"],"import React, { useEffect, useState, useRef } from 'react';\nimport tinycolor from 'tinycolor2';\nimport {\n  randomRGBA,\n  randomRGBA_matchH,\n  randomRGBA_matchSL,\n  colorCombos,\n} from './../../tools/colorTools';\nimport './Game.scss';\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport RoundColor from '../RoundColor/RoundColor';\nimport Button from '../Button/Button';\nimport Checkbox from './../Checkbox/Checkbox';\nimport Results from '../Results/Results';\nimport CompareColors from '../CompareColors/CompareColors';\nimport NewGameButtons from '../NewGameButtons/NewGameButtons';\nimport Highscores from '../Highscores/Highscores';\n\n//must have minimum 2 rounds\n// make these a user adjustable settings option on homepage\nconst totalRounds = 2;\nconst flashTime = 1200;\n\nexport default function Game() {\n  const [roundColors, setRoundColors] = useState(generateRounds(totalRounds));\n  const [roundColorNames, setRoundColorNames] = useState([]);\n  const [results, setResults] = useState([]);\n  const [pickedColor, setPickedColor] = useState(randomRGBA([20, 235]));\n  const [round, setRound] = useState(totalRounds); // round number reset at start game (this is not set to 1 to ensure useeffect is triggered)\n  // stages: new, preview, pick, compare, results\n  const [roundStage, setRoundStage] = useState('new');\n  // game modes: Hue, SatLum, HSL\n  const [gameMode, setgameMode] = useState('Hue');\n  const [preview, setPreview] = useState(true);\n  const [userPreferencePreview, setuserPreferencePreview] = useState(false);\n  const [gameActive, setGameActive] = useState(false);\n  const [highscores, setHighscores] = useState({\n    Hue: 0,\n    SatLum: 0,\n    HSL: 0,\n    CompHue: 0,\n    CompSL: 0,\n    CompHSL: 0,\n    TriadHue: 0,\n    TriadSL: 0,\n    TriadHSL: 0,\n    TetradHue: 0,\n    TetradSL: 0,\n    TetradHSL: 0,\n  });\n  const timer = useRef();\n  const isLoaded = useRef(false);\n\n  // Update player colour options when moving to next round (i.e. lock in Hue or Sat/Lum dpending on game mode)\n  useEffect(() => {\n    if (gameActive) {\n      const targetColor = roundColors[round - 1].targetColor;\n      switch (gameMode) {\n        case 'Hue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n          break;\n        case 'CompHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n          break;\n        case 'TriadHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n          break;\n        case 'TetradHue':\n          setPickedColor(randomRGBA_matchSL(targetColor));\n          break;\n        case 'SatLum':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        case 'CompSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        case 'TriadSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        case 'TetradSL':\n          setPickedColor(randomRGBA_matchH(targetColor));\n          break;\n        // case 'HSL':\n        //   setPickedColor(randomRGBA([20, 235]));\n        //   break;\n        default:\n          setPickedColor(randomRGBA([20, 235]));\n      }\n      if (preview) {\n        setRoundStage('preview');\n        timer.current = setTimeout(() => {\n          setRoundStage('pick');\n        }, flashTime);\n        return () => clearTimeout(timer.current);\n      } else {\n        setRoundStage('pick');\n      }\n    }\n  }, [round]);\n\n  // Get highscores from local storage\n  useEffect(() => {\n    const data = localStorage.getItem('highscores');\n    if (data) {\n      setHighscores(JSON.parse(data));\n    }\n    return () => {};\n  }, []);\n\n  // Set highscores to local storage\n  useEffect(() => {\n    localStorage.setItem('highscores', JSON.stringify(highscores));\n    return () => {};\n  }, [highscores]);\n\n  // Fetch colour names from API\n  useEffect(() => {\n    if (!isLoaded.current) {\n      isLoaded.current = true;\n      return;\n    }\n    let hexTargets = roundColors.map((round) =>\n      tinycolor.fromRatio(round.targetColor).toHexString()\n    );\n    let requestString = hexTargets.map((t) => t.slice(1)).join(',');\n    // https://github.com/meodai/color-names\n    fetch(`https://api.color.pizza/v1/${requestString}`, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        // console.log('colors', response.colors);\n        let names = response.colors.map((n) => n.name);\n        setRoundColorNames(names);\n      })\n      .catch((error) => console.log(error));\n  }, [roundColors]);\n\n  // Event handlers\n  const handlePickColor = (e) => {\n    const targetColor = roundColors[round - 1].targetColor;\n\n    setResults([...results, { picked: pickedColor, target: targetColor }]);\n    setRoundStage('compare');\n  };\n\n  const handleNextRound = (e) => {\n    console.log('round: ', round);\n    setRoundStage('preview');\n    setRound(round + 1);\n  };\n\n  const handleShowResults = (e) => {\n    setRoundStage('results');\n    // console.log(results);\n  };\n\n  const handleRestartGame = (e) => {\n    setGameActive(true);\n    setRoundColors(generateRounds(totalRounds));\n    setRound(1);\n    setResults([]);\n  };\n\n  const handleBackToStart = (e) => {\n    setGameActive(false);\n    // clearTimeout(timer.current);\n    setRoundStage('new');\n    setRound(totalRounds);\n  };\n\n  const handleSelectMode = (e) => {\n    let mode = e.target.dataset.gamemode;\n    console.log(mode);\n    setgameMode(mode);\n\n    if (\n      userPreferencePreview ||\n      mode === 'Hue' ||\n      mode === 'SatLum' ||\n      mode === 'HSL'\n    ) {\n      setPreview(true);\n    } else {\n      setPreview(false);\n    }\n    handleRestartGame();\n  };\n\n  const handleToggleUserPrefPreview = (e) => {\n    setuserPreferencePreview(!userPreferencePreview);\n  };\n\n  const handleUpdateHighscores = (score) => {\n    // don't update highscore if using a preview (unless a memory gamemode)\n    if (\n      preview &&\n      !(gameMode === 'Hue' || gameMode === 'SatLum' || gameMode === 'HSL')\n    ) {\n      return;\n    }\n\n    if (score > highscores[gameMode]) {\n      setHighscores((prevState) => ({\n        ...prevState,\n        [gameMode]: score,\n      }));\n    }\n  };\n\n  // const { r, g, b, a } = roundColors[round - 1];\n  // const { r: rp, g: gp, b: bp, a: ap } = pickedColor;\n\n  return (\n    // use switch statement?\n    <div className=\"game-container\">\n      {roundStage !== 'new' &&\n        roundStage !== 'preview' &&\n        roundStage !== 'results' && (\n          <div className=\"back-button-container\">\n            <Button label=\"Back\" handleClick={handleBackToStart} />\n          </div>\n        )}\n      {roundStage === 'new' && (\n        <div className=\"new-game\">\n          <NewGameButtons\n            handleSelectMode={handleSelectMode}\n            handleToggleUserPrefPreview={handleToggleUserPrefPreview}\n            userPreferencePreview={userPreferencePreview}\n          />\n\n          <div>\n            <p>Match the colour shown at the start of each round.</p>\n            <p>Use the Complementary/Triad/Tetrad colours as guides</p>\n            <p>\n              * Lets you preview the target colour. Score don't contribute to\n              highscores. Doesn't apply to memory games.\n            </p>\n          </div>\n          <Highscores highscores={highscores} />\n        </div>\n      )}\n      {roundStage === 'preview' && (\n        <RoundColor color={roundColors[round - 1].targetColor} />\n      )}\n      {roundStage === 'pick' && (\n        <>\n          <ColorPicker\n            pickedColor={pickedColor}\n            setPickedColor={setPickedColor}\n            handlePickColor={handlePickColor}\n            gameMode={gameMode}\n            roundColors={roundColors[round - 1]}\n            // targetColor={roundColors[round - 1].targetColor}\n            // complement={roundColors[round - 1].complement}\n            // triad={roundColors[round - 1].triad}\n            // tetrad={roundColors[round - 1].tetrad}\n          >\n            <h1>Round {round}</h1>\n          </ColorPicker>\n        </>\n      )}\n\n      {roundStage === 'compare' && (\n        <CompareColors\n          round={round}\n          roundColors={roundColors}\n          totalRounds={totalRounds}\n          targetColor={roundColors[round - 1].targetColor}\n          pickedColor={pickedColor}\n          handleNextRound={handleNextRound}\n          handleShowResults={handleShowResults}\n        />\n      )}\n\n      {roundStage === 'results' && (\n        <Results\n          results={results}\n          gameMode={gameMode}\n          roundColorNames={roundColorNames}\n          roundColors={roundColors}\n          handleRestartGame={handleRestartGame}\n          handleBackToStart={handleBackToStart}\n          handleUpdateHighscores={handleUpdateHighscores}\n        />\n      )}\n    </div>\n  );\n}\n\nconst generateRounds = (rounds) => {\n  let res = [];\n  let r = 0;\n  while (r < rounds) {\n    const targetColor = randomRGBA([20, 235]);\n\n    const { complement, triad, tetrad } = colorCombos(targetColor);\n\n    res.push({ targetColor, complement, triad, tetrad });\n    r++;\n  }\n  return res;\n};\n","/home/adgk/testing/react/test1/src/components/ColorPicker/ColorPicker.jsx",["79"],"import './ColorPicker.scss';\n\nimport { RgbColorPicker, HslColorPicker } from 'react-colorful';\nimport 'react-colorful/dist/index.css';\nimport Button from './../Button/Button';\n\nexport default function ColorPicker({\n  pickedColor,\n  setPickedColor,\n  handlePickColor,\n  gameMode,\n  roundColors,\n}) {\n  const { complement, triad, tetrad } = roundColors;\n  const { r, g, b } = pickedColor;\n\n  return (\n    <div\n      className={`color-picker gameMode-${gameMode}`}\n      style={{ backgroundColor: `rgb(${r},${g},${b})` }}\n    >\n      <div className=\"reference-colors\">\n        {(gameMode === 'CompHue' ||\n          gameMode === 'CompSL' ||\n          gameMode === 'CompHSL') && (\n          <div\n            key={complement}\n            className=\"complement-color\"\n            style={{ backgroundColor: `${complement}` }}\n          ></div>\n        )}\n        {(gameMode === 'TriadHue' ||\n          gameMode === 'TriadSL' ||\n          gameMode === 'TriadHSL') &&\n          triad.map((triad) => (\n            <div\n              key={triad}\n              className=\"triad-color\"\n              style={{ backgroundColor: `${triad}` }}\n            ></div>\n          ))}\n        {(gameMode === 'TetradHue' ||\n          gameMode === 'TetradSL' ||\n          gameMode === 'TetradHSL') &&\n          tetrad.map((tetra) => (\n            <div\n              key={tetra}\n              className=\"tetra-color\"\n              style={{ backgroundColor: `${tetra}` }}\n            ></div>\n          ))}\n      </div>\n\n      <RgbColorPicker color={pickedColor} onChange={setPickedColor} />\n      {/* <HslColorPicker color={pickedColor} onChange={setPickedColor} /> */}\n\n      <Button handleClick={handlePickColor} label=\"Pick\" />\n    </div>\n  );\n}\n\n// const colorCombos = (color) => {\n//   const complement = tinycolor(color).complement().toRgbString();\n//   let triad = tinycolor(color)\n//     .triad()\n//     .map((c) => c.toRgbString());\n//   let tetrad = tinycolor(color)\n//     .tetrad()\n//     .map((c) => c.toRgbString());\n\n//   //remove original colors\n//   triad.unshift();\n//   tetrad.unshift();\n//   return { complement, triad, tetrad };\n// };\n","/home/adgk/testing/react/test1/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/testing/react/test1/src/components/Button/Button.jsx",[],"/home/adgk/testing/react/test1/src/components/Results/Results.jsx",[],"/home/adgk/testing/react/test1/src/tools/deltaE.js",[],"/home/adgk/testing/react/test1/src/components/CompareColors/CompareColors.jsx",[],"/home/adgk/testing/react/test1/src/tools/rgb2hsl.js",["80","81","82"],"/// https://gist.github.com/emanuel-sanabria-developer/5793377#file-rgbtohsl-js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r, g, b) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, l];\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h, s, l) => {\n  var r, g, b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n};\n\nexport { rgbToHsl, hslToRgb };\n",["83","84"],"/home/adgk/testing/react/test1/src/components/Checkbox/Checkbox.js",[],"/home/adgk/testing/react/test1/src/tools/colorTools.js",[],"/home/adgk/testing/react/test1/src/components/NewGameButtons/NewGameButtons.jsx",[],"/home/adgk/testing/react/test1/src/components/Highscores/Highscores.jsx",[],"/home/adgk/testing/react/test1/src/tools/scoring.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":13,"column":8,"nodeType":"91","messageId":"92","endLine":13,"endColumn":16},{"ruleId":"93","severity":1,"message":"94","line":99,"column":6,"nodeType":"95","endLine":99,"endColumn":13,"suggestions":"96"},{"ruleId":"89","severity":1,"message":"97","line":3,"column":26,"nodeType":"91","messageId":"92","endLine":3,"endColumn":40},{"ruleId":"98","severity":1,"message":"99","line":24,"column":11,"nodeType":"100","messageId":"101","endLine":24,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":29,"column":5,"nodeType":"104","messageId":"105","endLine":39,"endColumn":6},{"ruleId":"98","severity":1,"message":"99","line":60,"column":9,"nodeType":"100","messageId":"101","endLine":60,"endColumn":11},{"ruleId":"85","replacedBy":"106"},{"ruleId":"87","replacedBy":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gameMode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["110"],"'HslColorPicker' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["108"],["109"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [gameActive, gameMode, preview, round, roundColors]",{"range":"113","text":"114"},[3364,3371],"[gameActive, gameMode, preview, round, roundColors]"]