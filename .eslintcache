[{"/home/adgk/testing/react/test1/src/index.js":"1","/home/adgk/testing/react/test1/src/reportWebVitals.js":"2","/home/adgk/testing/react/test1/src/App.js":"3","/home/adgk/testing/react/test1/src/components/Main/Main.jsx":"4","/home/adgk/testing/react/test1/src/components/Game/Game.jsx":"5","/home/adgk/testing/react/test1/src/components/ColorPicker/ColorPicker.jsx":"6","/home/adgk/testing/react/test1/src/components/RoundColor/RoundColor.jsx":"7","/home/adgk/testing/react/test1/src/components/Button/Button.jsx":"8","/home/adgk/testing/react/test1/src/components/Results/Results.jsx":"9","/home/adgk/testing/react/test1/src/tools/deltaE.js":"10","/home/adgk/testing/react/test1/src/components/CompareColors/CompareColors.jsx":"11","/home/adgk/testing/react/test1/src/tools/rgb2hsl.js":"12","/home/adgk/testing/react/test1/src/tools/colorDifference.js":"13","/home/adgk/testing/react/test1/src/components/Checkbox/Checkbox.js":"14"},{"size":500,"mtime":1610900279476,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1610900279497,"results":"17","hashOfConfig":"16"},{"size":233,"mtime":1610978139477,"results":"18","hashOfConfig":"16"},{"size":148,"mtime":1610904430842,"results":"19","hashOfConfig":"16"},{"size":10407,"mtime":1611002857132,"results":"20","hashOfConfig":"16"},{"size":2055,"mtime":1611001098083,"results":"21","hashOfConfig":"16"},{"size":258,"mtime":1610993652521,"results":"22","hashOfConfig":"16"},{"size":223,"mtime":1610967697770,"results":"23","hashOfConfig":"16"},{"size":1865,"mtime":1610987460679,"results":"24","hashOfConfig":"16"},{"size":1531,"mtime":1610913524693,"results":"25","hashOfConfig":"16"},{"size":870,"mtime":1610977718694,"results":"26","hashOfConfig":"16"},{"size":2081,"mtime":1610969389990,"results":"27","hashOfConfig":"16"},{"size":233,"mtime":1610976342915,"results":"28","hashOfConfig":"16"},{"size":253,"mtime":1611002690994,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"uvxg06",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/adgk/testing/react/test1/src/index.js",[],["63","64"],"/home/adgk/testing/react/test1/src/reportWebVitals.js",[],"/home/adgk/testing/react/test1/src/App.js",[],"/home/adgk/testing/react/test1/src/components/Main/Main.jsx",[],"/home/adgk/testing/react/test1/src/components/Game/Game.jsx",["65"],"/home/adgk/testing/react/test1/src/components/ColorPicker/ColorPicker.jsx",["66","67","68","69","70","71","72"],"import React, { useState, useEffect } from 'react';\nimport './ColorPicker.scss';\n\nimport { RgbColorPicker, HslColorPicker } from 'react-colorful';\nimport 'react-colorful/dist/index.css';\nimport Button from './../Button/Button';\n\nexport default function ColorPicker({\n  pickedColor,\n  setPickedColor,\n  handlePickColor,\n  gameMode,\n  roundColors,\n}) {\n  const { targetColor, complement, triad, tetrad } = roundColors;\n  const { r, g, b, a } = pickedColor;\n  const { r: rt, g: gt, b: bt } = targetColor;\n\n  return (\n    <div\n      className={`color-picker gameMode-${gameMode}`}\n      style={{ backgroundColor: `rgb(${r},${g},${b})` }}\n    >\n      {(gameMode === 'CompHue' ||\n        gameMode === 'CompSL' ||\n        gameMode === 'CompHSL') && (\n        <div\n          className=\"complement-color\"\n          style={{ backgroundColor: `${complement}` }}\n        ></div>\n      )}\n      {(gameMode === 'TriadHue' ||\n        gameMode === 'TriadSL' ||\n        gameMode === 'TriadHSL') &&\n        triad.map((triad) => (\n          <div\n            className=\"triad-color\"\n            style={{ backgroundColor: `${triad}` }}\n          ></div>\n        ))}\n      {(gameMode === 'TetradHue' ||\n        gameMode === 'TetradSL' ||\n        gameMode === 'TetradHSL') &&\n        tetrad.map((tetra) => (\n          <div\n            className=\"tetra-color\"\n            style={{ backgroundColor: `${tetra}` }}\n          ></div>\n        ))}\n\n      <RgbColorPicker color={pickedColor} onChange={setPickedColor} />\n      {/* <HslColorPicker color={pickedColor} onChange={setPickedColor} /> */}\n\n      <Button handleClick={handlePickColor} label=\"Pick\" />\n    </div>\n  );\n}\n\n// const colorCombos = (color) => {\n//   const complement = tinycolor(color).complement().toRgbString();\n//   let triad = tinycolor(color)\n//     .triad()\n//     .map((c) => c.toRgbString());\n//   let tetrad = tinycolor(color)\n//     .tetrad()\n//     .map((c) => c.toRgbString());\n\n//   //remove original colors\n//   triad.unshift();\n//   tetrad.unshift();\n//   return { complement, triad, tetrad };\n// };\n","/home/adgk/testing/react/test1/src/components/RoundColor/RoundColor.jsx",[],"/home/adgk/testing/react/test1/src/components/Button/Button.jsx",[],"/home/adgk/testing/react/test1/src/components/Results/Results.jsx",["73","74","75"],"import React, { useEffect } from 'react';\nimport './Results.scss';\nimport deltaE from './../../tools/deltaE';\nimport colorDifference from './../../tools/colorDifference';\n\nimport Button from '../Button/Button';\n\nexport default function Results({\n  results,\n  handleRestartGame,\n  handleBackToStart,\n  handleUpdateHighscores,\n}) {\n  const totalScore = calculateTotalScore(results);\n  useEffect(() => {\n    handleUpdateHighscores(totalScore);\n  }, [handleUpdateHighscores, results, totalScore]);\n\n  return (\n    <div className=\"results\">\n      <h3>Score : {totalScore} %</h3>\n      <Button label=\"Restart\" handleClick={handleRestartGame} />\n      <Button label=\"Home\" handleClick={handleBackToStart} />\n\n      <ul>\n        {results.map((round, idx) => {\n          const { r, g, b, a } = round.picked;\n          const { r: rp, g: gp, b: bp, a: ap } = round.target;\n          const score = Math.round(calculateScore(round.picked, round.target));\n\n          return (\n            <li key={idx} className=\"round-group\">\n              <h4>Round {idx + 1}</h4>\n              <div\n                className=\"picked\"\n                style={{ backgroundColor: `rgb(${r},${g},${b})` }}\n              ></div>\n              <div\n                className=\"target\"\n                style={{ backgroundColor: `rgb(${rp},${gp},${bp})` }}\n              ></div>\n              <h4>{score} %</h4>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nconst calculateScore = (c1, c2) => {\n  let diff = colorDifference(c1, c2); // 0 (same) - 100 (opposite)\n  let temp = 100 - diff * 2;\n  let score = temp >= 0 ? temp :0\n  return score\n};\nconst calculateTotalScore = (results) => {\n  let total = results.reduce((acc, round) => {\n    let score = calculateScore(round.picked, round.target);\n    return score + acc;\n  }, 0);\n\n  return Math.round(total / results.length);\n};\n","/home/adgk/testing/react/test1/src/tools/deltaE.js",[],"/home/adgk/testing/react/test1/src/components/CompareColors/CompareColors.jsx",["76","77"],"import React from 'react';\nimport \"./CompareColors.scss\"\nimport Button from './../Button/Button';\n\nexport default function CompareColors({\n  round,\n  totalRounds,\n  targetColor,\n  pickedColor,\n  handleNextRound,\n  handleShowResults,\n}) {\n  const { r, g, b, a } = targetColor;\n  const { r: rp, g: gp, b: bp, a: ap } = pickedColor;\n\n  return (\n    <div className=\"compare-colors\">\n      <div className=\"round-group\">\n        <div\n          className=\"picked\"\n          style={{ backgroundColor: `rgb(${r},${g},${b})` }}\n        ></div>\n        <div\n          className=\"target\"\n          style={{ backgroundColor: `rgb(${rp},${gp},${bp})` }}\n        ></div>\n      </div>\n      {round === totalRounds ? (\n        <Button handleClick={handleShowResults} label=\"Results\" />\n      ) : (\n        <Button handleClick={handleNextRound} label=\"Next\" />\n      )}\n    </div>\n  );\n}\n","/home/adgk/testing/react/test1/src/tools/rgb2hsl.js",["78","79","80"],"/// https://gist.github.com/emanuel-sanabria-developer/5793377#file-rgbtohsl-js\n\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nconst rgbToHsl = (r, g, b) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, l];\n};\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nconst hslToRgb = (h, s, l) => {\n  var r, g, b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n};\n\nexport { rgbToHsl, hslToRgb };\n","/home/adgk/testing/react/test1/src/tools/colorDifference.js",[],"/home/adgk/testing/react/test1/src/components/Checkbox/Checkbox.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":96,"column":6,"nodeType":"87","endLine":96,"endColumn":13,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"89","severity":1,"message":"93","line":1,"column":27,"nodeType":"91","messageId":"92","endLine":1,"endColumn":36},{"ruleId":"89","severity":1,"message":"94","line":4,"column":26,"nodeType":"91","messageId":"92","endLine":4,"endColumn":40},{"ruleId":"89","severity":1,"message":"95","line":16,"column":20,"nodeType":"91","messageId":"92","endLine":16,"endColumn":21},{"ruleId":"89","severity":1,"message":"96","line":17,"column":14,"nodeType":"91","messageId":"92","endLine":17,"endColumn":16},{"ruleId":"89","severity":1,"message":"97","line":17,"column":21,"nodeType":"91","messageId":"92","endLine":17,"endColumn":23},{"ruleId":"89","severity":1,"message":"98","line":17,"column":28,"nodeType":"91","messageId":"92","endLine":17,"endColumn":30},{"ruleId":"89","severity":1,"message":"99","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"95","line":27,"column":28,"nodeType":"91","messageId":"92","endLine":27,"endColumn":29},{"ruleId":"89","severity":1,"message":"100","line":28,"column":43,"nodeType":"91","messageId":"92","endLine":28,"endColumn":45},{"ruleId":"89","severity":1,"message":"95","line":13,"column":20,"nodeType":"91","messageId":"92","endLine":13,"endColumn":21},{"ruleId":"89","severity":1,"message":"100","line":14,"column":35,"nodeType":"91","messageId":"92","endLine":14,"endColumn":37},{"ruleId":"101","severity":1,"message":"102","line":24,"column":11,"nodeType":"103","messageId":"104","endLine":24,"endColumn":13},{"ruleId":"105","severity":1,"message":"106","line":29,"column":5,"nodeType":"107","messageId":"108","endLine":39,"endColumn":6},{"ruleId":"101","severity":1,"message":"102","line":60,"column":9,"nodeType":"103","messageId":"104","endLine":60,"endColumn":11},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameActive', 'gameMode', 'preview', and 'roundColors'. Either include them or remove the dependency array.","ArrayExpression",["111"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'HslColorPicker' is defined but never used.","'a' is assigned a value but never used.","'rt' is assigned a value but never used.","'gt' is assigned a value but never used.","'bt' is assigned a value but never used.","'deltaE' is defined but never used.","'ap' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [gameActive, gameMode, preview, round, roundColors]",{"range":"114","text":"115"},[3182,3189],"[gameActive, gameMode, preview, round, roundColors]"]